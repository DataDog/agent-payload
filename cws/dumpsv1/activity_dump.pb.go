// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: proto/cws/dumpsv1/activity_dump.proto

package dumpsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashState int32

const (
	HashState_NO_HASH                   HashState = 0
	HashState_DONE                      HashState = 1
	HashState_FILE_NOT_FOUND            HashState = 2
	HashState_PATHNAME_RESOLUTION_ERROR HashState = 3
	HashState_FILE_TOO_BIG              HashState = 4
	HashState_EVENT_TYPE_NOT_CONFIGURED HashState = 5
	HashState_HASH_WAS_RATE_LIMITED     HashState = 6
	HashState_UNKNOWN_HASH_ERROR        HashState = 7
)

// Enum value maps for HashState.
var (
	HashState_name = map[int32]string{
		0: "NO_HASH",
		1: "DONE",
		2: "FILE_NOT_FOUND",
		3: "PATHNAME_RESOLUTION_ERROR",
		4: "FILE_TOO_BIG",
		5: "EVENT_TYPE_NOT_CONFIGURED",
		6: "HASH_WAS_RATE_LIMITED",
		7: "UNKNOWN_HASH_ERROR",
	}
	HashState_value = map[string]int32{
		"NO_HASH":                   0,
		"DONE":                      1,
		"FILE_NOT_FOUND":            2,
		"PATHNAME_RESOLUTION_ERROR": 3,
		"FILE_TOO_BIG":              4,
		"EVENT_TYPE_NOT_CONFIGURED": 5,
		"HASH_WAS_RATE_LIMITED":     6,
		"UNKNOWN_HASH_ERROR":        7,
	}
)

func (x HashState) Enum() *HashState {
	p := new(HashState)
	*p = x
	return p
}

func (x HashState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cws_dumpsv1_activity_dump_proto_enumTypes[0].Descriptor()
}

func (HashState) Type() protoreflect.EnumType {
	return &file_proto_cws_dumpsv1_activity_dump_proto_enumTypes[0]
}

func (x HashState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashState.Descriptor instead.
func (HashState) EnumDescriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{0}
}

type GenerationType int32

const (
	GenerationType_UNKNOWN  GenerationType = 0
	GenerationType_RUNTIME  GenerationType = 1
	GenerationType_SNAPSHOT GenerationType = 2
)

// Enum value maps for GenerationType.
var (
	GenerationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "RUNTIME",
		2: "SNAPSHOT",
	}
	GenerationType_value = map[string]int32{
		"UNKNOWN":  0,
		"RUNTIME":  1,
		"SNAPSHOT": 2,
	}
)

func (x GenerationType) Enum() *GenerationType {
	p := new(GenerationType)
	*p = x
	return p
}

func (x GenerationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cws_dumpsv1_activity_dump_proto_enumTypes[1].Descriptor()
}

func (GenerationType) Type() protoreflect.EnumType {
	return &file_proto_cws_dumpsv1_activity_dump_proto_enumTypes[1]
}

func (x GenerationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerationType.Descriptor instead.
func (GenerationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{1}
}

type EventProfileState int32

const (
	EventProfileState_NO_PROFILE          EventProfileState = 0
	EventProfileState_PROFILE_AT_MAX_SIZE EventProfileState = 1
	EventProfileState_UNSTABLE_PROFILE    EventProfileState = 2
	EventProfileState_STABLE_PROFILE      EventProfileState = 3
	EventProfileState_AUTO_LEARNING       EventProfileState = 4
	EventProfileState_WORKLOAD_WARMUP     EventProfileState = 5
)

// Enum value maps for EventProfileState.
var (
	EventProfileState_name = map[int32]string{
		0: "NO_PROFILE",
		1: "PROFILE_AT_MAX_SIZE",
		2: "UNSTABLE_PROFILE",
		3: "STABLE_PROFILE",
		4: "AUTO_LEARNING",
		5: "WORKLOAD_WARMUP",
	}
	EventProfileState_value = map[string]int32{
		"NO_PROFILE":          0,
		"PROFILE_AT_MAX_SIZE": 1,
		"UNSTABLE_PROFILE":    2,
		"STABLE_PROFILE":      3,
		"AUTO_LEARNING":       4,
		"WORKLOAD_WARMUP":     5,
	}
)

func (x EventProfileState) Enum() *EventProfileState {
	p := new(EventProfileState)
	*p = x
	return p
}

func (x EventProfileState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventProfileState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_cws_dumpsv1_activity_dump_proto_enumTypes[2].Descriptor()
}

func (EventProfileState) Type() protoreflect.EnumType {
	return &file_proto_cws_dumpsv1_activity_dump_proto_enumTypes[2]
}

func (x EventProfileState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventProfileState.Descriptor instead.
func (EventProfileState) EnumDescriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{2}
}

type SecDump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Service  string                 `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Source   string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Metadata *Metadata              `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Tags     []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Tree     []*ProcessActivityNode `protobuf:"bytes,6,rep,name=tree,proto3" json:"tree,omitempty"`
}

func (x *SecDump) Reset() {
	*x = SecDump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecDump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecDump) ProtoMessage() {}

func (x *SecDump) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecDump.ProtoReflect.Descriptor instead.
func (*SecDump) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{0}
}

func (x *SecDump) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SecDump) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *SecDump) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SecDump) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SecDump) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SecDump) GetTree() []*ProcessActivityNode {
	if x != nil {
		return x.Tree
	}
	return nil
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentVersion      string `protobuf:"bytes,1,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	AgentCommit       string `protobuf:"bytes,2,opt,name=agent_commit,json=agentCommit,proto3" json:"agent_commit,omitempty"`
	KernelVersion     string `protobuf:"bytes,3,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	LinuxDistribution string `protobuf:"bytes,4,opt,name=linux_distribution,json=linuxDistribution,proto3" json:"linux_distribution,omitempty"`
	Arch              string `protobuf:"bytes,13,opt,name=arch,proto3" json:"arch,omitempty"`
	Name              string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ProtobufVersion   string `protobuf:"bytes,6,opt,name=protobuf_version,json=protobufVersion,proto3" json:"protobuf_version,omitempty"`
	DifferentiateArgs bool   `protobuf:"varint,7,opt,name=differentiate_args,json=differentiateArgs,proto3" json:"differentiate_args,omitempty"`
	Comm              string `protobuf:"bytes,8,opt,name=comm,proto3" json:"comm,omitempty"`
	ContainerId       string `protobuf:"bytes,9,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Start             uint64 `protobuf:"varint,10,opt,name=start,proto3" json:"start,omitempty"`
	End               uint64 `protobuf:"varint,11,opt,name=end,proto3" json:"end,omitempty"`
	Size              uint64 `protobuf:"varint,12,opt,name=size,proto3" json:"size,omitempty"`
	Serialization     string `protobuf:"bytes,14,opt,name=serialization,proto3" json:"serialization,omitempty"`
	CgroupId          string `protobuf:"bytes,15,opt,name=cgroup_id,json=cgroupId,proto3" json:"cgroup_id,omitempty"`
	CgroupManager     string `protobuf:"bytes,16,opt,name=cgroup_manager,json=cgroupManager,proto3" json:"cgroup_manager,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *Metadata) GetAgentCommit() string {
	if x != nil {
		return x.AgentCommit
	}
	return ""
}

func (x *Metadata) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *Metadata) GetLinuxDistribution() string {
	if x != nil {
		return x.LinuxDistribution
	}
	return ""
}

func (x *Metadata) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetProtobufVersion() string {
	if x != nil {
		return x.ProtobufVersion
	}
	return ""
}

func (x *Metadata) GetDifferentiateArgs() bool {
	if x != nil {
		return x.DifferentiateArgs
	}
	return false
}

func (x *Metadata) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *Metadata) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *Metadata) GetStart() uint64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Metadata) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Metadata) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Metadata) GetSerialization() string {
	if x != nil {
		return x.Serialization
	}
	return ""
}

func (x *Metadata) GetCgroupId() string {
	if x != nil {
		return x.CgroupId
	}
	return ""
}

func (x *Metadata) GetCgroupManager() string {
	if x != nil {
		return x.CgroupManager
	}
	return ""
}

type ProfileSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageName string `protobuf:"bytes,1,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ImageTag  string `protobuf:"bytes,2,opt,name=image_tag,json=imageTag,proto3" json:"image_tag,omitempty"`
}

func (x *ProfileSelector) Reset() {
	*x = ProfileSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileSelector) ProtoMessage() {}

func (x *ProfileSelector) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileSelector.ProtoReflect.Descriptor instead.
func (*ProfileSelector) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{2}
}

func (x *ProfileSelector) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ProfileSelector) GetImageTag() string {
	if x != nil {
		return x.ImageTag
	}
	return ""
}

type ProfileContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstSeen      uint64                     `protobuf:"varint,1,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	LastSeen       uint64                     `protobuf:"varint,2,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	EventTypeState map[uint32]*EventTypeState `protobuf:"bytes,3,rep,name=event_type_state,json=eventTypeState,proto3" json:"event_type_state,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Syscalls       []uint32                   `protobuf:"varint,4,rep,packed,name=syscalls,proto3" json:"syscalls,omitempty"`
	Tags           []string                   `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ProfileContext) Reset() {
	*x = ProfileContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileContext) ProtoMessage() {}

func (x *ProfileContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileContext.ProtoReflect.Descriptor instead.
func (*ProfileContext) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{3}
}

func (x *ProfileContext) GetFirstSeen() uint64 {
	if x != nil {
		return x.FirstSeen
	}
	return 0
}

func (x *ProfileContext) GetLastSeen() uint64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *ProfileContext) GetEventTypeState() map[uint32]*EventTypeState {
	if x != nil {
		return x.EventTypeState
	}
	return nil
}

func (x *ProfileContext) GetSyscalls() []uint32 {
	if x != nil {
		return x.Syscalls
	}
	return nil
}

func (x *ProfileContext) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type SecurityProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	Status uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	Version  string    `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	Syscalls        []uint32                   `protobuf:"varint,5,rep,packed,name=syscalls,proto3" json:"syscalls,omitempty"`
	Tree            []*ProcessActivityNode     `protobuf:"bytes,6,rep,name=tree,proto3" json:"tree,omitempty"`
	ProfileContexts map[string]*ProfileContext `protobuf:"bytes,7,rep,name=profile_contexts,json=profileContexts,proto3" json:"profile_contexts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Selector        *ProfileSelector           `protobuf:"bytes,8,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *SecurityProfile) Reset() {
	*x = SecurityProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityProfile) ProtoMessage() {}

func (x *SecurityProfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityProfile.ProtoReflect.Descriptor instead.
func (*SecurityProfile) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *SecurityProfile) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *SecurityProfile) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SecurityProfile) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *SecurityProfile) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *SecurityProfile) GetSyscalls() []uint32 {
	if x != nil {
		return x.Syscalls
	}
	return nil
}

func (x *SecurityProfile) GetTree() []*ProcessActivityNode {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *SecurityProfile) GetProfileContexts() map[string]*ProfileContext {
	if x != nil {
		return x.ProfileContexts
	}
	return nil
}

func (x *SecurityProfile) GetSelector() *ProfileSelector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type ProcessActivityNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process        *ProcessInfo           `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	GenerationType GenerationType         `protobuf:"varint,8,opt,name=generation_type,json=generationType,proto3,enum=datadog.cws.dumpsv1.GenerationType" json:"generation_type,omitempty"`
	MatchedRules   []*MatchedRule         `protobuf:"bytes,9,rep,name=matched_rules,json=matchedRules,proto3" json:"matched_rules,omitempty"`
	Children       []*ProcessActivityNode `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Files          []*FileActivityNode    `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	DnsNames       []*DNSNode             `protobuf:"bytes,5,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	Sockets        []*SocketNode          `protobuf:"bytes,6,rep,name=sockets,proto3" json:"sockets,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	Syscalls       []uint32             `protobuf:"varint,7,rep,packed,name=syscalls,proto3" json:"syscalls,omitempty"`
	ImageTags      []string             `protobuf:"bytes,10,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	ImdsEvents     []*IMDSNode          `protobuf:"bytes,11,rep,name=imds_events,json=imdsEvents,proto3" json:"imds_events,omitempty"`
	SyscallNodes   []*SyscallNode       `protobuf:"bytes,12,rep,name=syscall_nodes,json=syscallNodes,proto3" json:"syscall_nodes,omitempty"`
	NetworkDevices []*NetworkDeviceNode `protobuf:"bytes,13,rep,name=network_devices,json=networkDevices,proto3" json:"network_devices,omitempty"`
}

func (x *ProcessActivityNode) Reset() {
	*x = ProcessActivityNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessActivityNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessActivityNode) ProtoMessage() {}

func (x *ProcessActivityNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessActivityNode.ProtoReflect.Descriptor instead.
func (*ProcessActivityNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessActivityNode) GetProcess() *ProcessInfo {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessActivityNode) GetGenerationType() GenerationType {
	if x != nil {
		return x.GenerationType
	}
	return GenerationType_UNKNOWN
}

func (x *ProcessActivityNode) GetMatchedRules() []*MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *ProcessActivityNode) GetChildren() []*ProcessActivityNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *ProcessActivityNode) GetFiles() []*FileActivityNode {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ProcessActivityNode) GetDnsNames() []*DNSNode {
	if x != nil {
		return x.DnsNames
	}
	return nil
}

func (x *ProcessActivityNode) GetSockets() []*SocketNode {
	if x != nil {
		return x.Sockets
	}
	return nil
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *ProcessActivityNode) GetSyscalls() []uint32 {
	if x != nil {
		return x.Syscalls
	}
	return nil
}

func (x *ProcessActivityNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *ProcessActivityNode) GetImdsEvents() []*IMDSNode {
	if x != nil {
		return x.ImdsEvents
	}
	return nil
}

func (x *ProcessActivityNode) GetSyscallNodes() []*SyscallNode {
	if x != nil {
		return x.SyscallNodes
	}
	return nil
}

func (x *ProcessActivityNode) GetNetworkDevices() []*NetworkDeviceNode {
	if x != nil {
		return x.NetworkDevices
	}
	return nil
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid  uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Tid  uint32 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Ppid uint32 `protobuf:"varint,3,opt,name=ppid,proto3" json:"ppid,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	Cookie      uint32    `protobuf:"varint,4,opt,name=cookie,proto3" json:"cookie,omitempty"`
	IsThread    bool      `protobuf:"varint,5,opt,name=is_thread,json=isThread,proto3" json:"is_thread,omitempty"`
	File        *FileInfo `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	ContainerId string    `protobuf:"bytes,7,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	SpanId uint64 `protobuf:"varint,8,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
	TraceId       uint64       `protobuf:"varint,9,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Tty           string       `protobuf:"bytes,10,opt,name=tty,proto3" json:"tty,omitempty"`
	Comm          string       `protobuf:"bytes,11,opt,name=comm,proto3" json:"comm,omitempty"`
	ForkTime      uint64       `protobuf:"varint,12,opt,name=fork_time,json=forkTime,proto3" json:"fork_time,omitempty"`
	ExitTime      uint64       `protobuf:"varint,13,opt,name=exit_time,json=exitTime,proto3" json:"exit_time,omitempty"`
	ExecTime      uint64       `protobuf:"varint,14,opt,name=exec_time,json=execTime,proto3" json:"exec_time,omitempty"`
	Credentials   *Credentials `protobuf:"bytes,15,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Args          []string     `protobuf:"bytes,16,rep,name=args,proto3" json:"args,omitempty"`
	Argv0         string       `protobuf:"bytes,17,opt,name=argv0,proto3" json:"argv0,omitempty"`
	ArgsTruncated bool         `protobuf:"varint,18,opt,name=args_truncated,json=argsTruncated,proto3" json:"args_truncated,omitempty"`
	Envs          []string     `protobuf:"bytes,19,rep,name=envs,proto3" json:"envs,omitempty"`
	EnvsTruncated bool         `protobuf:"varint,20,opt,name=envs_truncated,json=envsTruncated,proto3" json:"envs_truncated,omitempty"`
	IsExecChild   bool         `protobuf:"varint,21,opt,name=is_exec_child,json=isExecChild,proto3" json:"is_exec_child,omitempty"`
	Cookie64      uint64       `protobuf:"varint,22,opt,name=cookie64,proto3" json:"cookie64,omitempty"`
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessInfo) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessInfo) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *ProcessInfo) GetPpid() uint32 {
	if x != nil {
		return x.Ppid
	}
	return 0
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *ProcessInfo) GetCookie() uint32 {
	if x != nil {
		return x.Cookie
	}
	return 0
}

func (x *ProcessInfo) GetIsThread() bool {
	if x != nil {
		return x.IsThread
	}
	return false
}

func (x *ProcessInfo) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *ProcessInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *ProcessInfo) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

// Deprecated: Marked as deprecated in proto/cws/dumpsv1/activity_dump.proto.
func (x *ProcessInfo) GetTraceId() uint64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *ProcessInfo) GetTty() string {
	if x != nil {
		return x.Tty
	}
	return ""
}

func (x *ProcessInfo) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *ProcessInfo) GetForkTime() uint64 {
	if x != nil {
		return x.ForkTime
	}
	return 0
}

func (x *ProcessInfo) GetExitTime() uint64 {
	if x != nil {
		return x.ExitTime
	}
	return 0
}

func (x *ProcessInfo) GetExecTime() uint64 {
	if x != nil {
		return x.ExecTime
	}
	return 0
}

func (x *ProcessInfo) GetCredentials() *Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *ProcessInfo) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProcessInfo) GetArgv0() string {
	if x != nil {
		return x.Argv0
	}
	return ""
}

func (x *ProcessInfo) GetArgsTruncated() bool {
	if x != nil {
		return x.ArgsTruncated
	}
	return false
}

func (x *ProcessInfo) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *ProcessInfo) GetEnvsTruncated() bool {
	if x != nil {
		return x.EnvsTruncated
	}
	return false
}

func (x *ProcessInfo) GetIsExecChild() bool {
	if x != nil {
		return x.IsExecChild
	}
	return false
}

func (x *ProcessInfo) GetCookie64() uint64 {
	if x != nil {
		return x.Cookie64
	}
	return 0
}

type FileActivityNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedRules   []*MatchedRule      `protobuf:"bytes,9,rep,name=matched_rules,json=matchedRules,proto3" json:"matched_rules,omitempty"`
	ImageTags      []string            `protobuf:"bytes,10,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	Name           string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsPattern      bool                `protobuf:"varint,7,opt,name=is_pattern,json=isPattern,proto3" json:"is_pattern,omitempty"`
	File           *FileInfo           `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	GenerationType GenerationType      `protobuf:"varint,8,opt,name=generation_type,json=generationType,proto3,enum=datadog.cws.dumpsv1.GenerationType" json:"generation_type,omitempty"`
	FirstSeen      uint64              `protobuf:"varint,4,opt,name=first_seen,json=firstSeen,proto3" json:"first_seen,omitempty"`
	Open           *OpenNode           `protobuf:"bytes,5,opt,name=open,proto3" json:"open,omitempty"`
	Children       []*FileActivityNode `protobuf:"bytes,6,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *FileActivityNode) Reset() {
	*x = FileActivityNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileActivityNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileActivityNode) ProtoMessage() {}

func (x *FileActivityNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileActivityNode.ProtoReflect.Descriptor instead.
func (*FileActivityNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{7}
}

func (x *FileActivityNode) GetMatchedRules() []*MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *FileActivityNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *FileActivityNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileActivityNode) GetIsPattern() bool {
	if x != nil {
		return x.IsPattern
	}
	return false
}

func (x *FileActivityNode) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FileActivityNode) GetGenerationType() GenerationType {
	if x != nil {
		return x.GenerationType
	}
	return GenerationType_UNKNOWN
}

func (x *FileActivityNode) GetFirstSeen() uint64 {
	if x != nil {
		return x.FirstSeen
	}
	return 0
}

func (x *FileActivityNode) GetOpen() *OpenNode {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *FileActivityNode) GetChildren() []*FileActivityNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type OpenNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Retval int64  `protobuf:"zigzag64,1,opt,name=retval,proto3" json:"retval,omitempty"`
	Flags  uint32 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Mode   uint32 `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *OpenNode) Reset() {
	*x = OpenNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenNode) ProtoMessage() {}

func (x *OpenNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenNode.ProtoReflect.Descriptor instead.
func (*OpenNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{8}
}

func (x *OpenNode) GetRetval() int64 {
	if x != nil {
		return x.Retval
	}
	return 0
}

func (x *OpenNode) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *OpenNode) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type DNSNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedRules []*MatchedRule `protobuf:"bytes,2,rep,name=matched_rules,json=matchedRules,proto3" json:"matched_rules,omitempty"`
	ImageTags    []string       `protobuf:"bytes,3,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	Requests     []*DNSInfo     `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *DNSNode) Reset() {
	*x = DNSNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSNode) ProtoMessage() {}

func (x *DNSNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSNode.ProtoReflect.Descriptor instead.
func (*DNSNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{9}
}

func (x *DNSNode) GetMatchedRules() []*MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *DNSNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *DNSNode) GetRequests() []*DNSInfo {
	if x != nil {
		return x.Requests
	}
	return nil
}

type DNSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Class uint32 `protobuf:"varint,3,opt,name=class,proto3" json:"class,omitempty"`
	Size  uint32 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Count uint32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DNSInfo) Reset() {
	*x = DNSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSInfo) ProtoMessage() {}

func (x *DNSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSInfo.ProtoReflect.Descriptor instead.
func (*DNSInfo) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{10}
}

func (x *DNSInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DNSInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DNSInfo) GetClass() uint32 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *DNSInfo) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *DNSInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SyscallNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageTags []string `protobuf:"bytes,1,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	Syscall   int32    `protobuf:"varint,2,opt,name=syscall,proto3" json:"syscall,omitempty"`
}

func (x *SyscallNode) Reset() {
	*x = SyscallNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyscallNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyscallNode) ProtoMessage() {}

func (x *SyscallNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyscallNode.ProtoReflect.Descriptor instead.
func (*SyscallNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{11}
}

func (x *SyscallNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *SyscallNode) GetSyscall() int32 {
	if x != nil {
		return x.Syscall
	}
	return 0
}

type IMDSNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedRules []*MatchedRule `protobuf:"bytes,1,rep,name=matched_rules,json=matchedRules,proto3" json:"matched_rules,omitempty"`
	ImageTags    []string       `protobuf:"bytes,2,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	Event        *IMDSEvent     `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *IMDSNode) Reset() {
	*x = IMDSNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMDSNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMDSNode) ProtoMessage() {}

func (x *IMDSNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMDSNode.ProtoReflect.Descriptor instead.
func (*IMDSNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{12}
}

func (x *IMDSNode) GetMatchedRules() []*MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *IMDSNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *IMDSNode) GetEvent() *IMDSEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

type IMDSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          string        `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	CloudProvider string        `protobuf:"bytes,2,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	Url           string        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Host          string        `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	UserAgent     string        `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Server        string        `protobuf:"bytes,6,opt,name=server,proto3" json:"server,omitempty"`
	Aws           *AWSIMDSEvent `protobuf:"bytes,7,opt,name=aws,proto3" json:"aws,omitempty"`
}

func (x *IMDSEvent) Reset() {
	*x = IMDSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMDSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMDSEvent) ProtoMessage() {}

func (x *IMDSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMDSEvent.ProtoReflect.Descriptor instead.
func (*IMDSEvent) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{13}
}

func (x *IMDSEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IMDSEvent) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

func (x *IMDSEvent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IMDSEvent) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *IMDSEvent) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *IMDSEvent) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *IMDSEvent) GetAws() *AWSIMDSEvent {
	if x != nil {
		return x.Aws
	}
	return nil
}

type AWSIMDSEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsImdsV2            bool                    `protobuf:"varint,1,opt,name=is_imds_v2,json=isImdsV2,proto3" json:"is_imds_v2,omitempty"`
	SecurityCredentials *AWSSecurityCredentials `protobuf:"bytes,2,opt,name=security_credentials,json=securityCredentials,proto3" json:"security_credentials,omitempty"`
}

func (x *AWSIMDSEvent) Reset() {
	*x = AWSIMDSEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSIMDSEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSIMDSEvent) ProtoMessage() {}

func (x *AWSIMDSEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSIMDSEvent.ProtoReflect.Descriptor instead.
func (*AWSIMDSEvent) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{14}
}

func (x *AWSIMDSEvent) GetIsImdsV2() bool {
	if x != nil {
		return x.IsImdsV2
	}
	return false
}

func (x *AWSIMDSEvent) GetSecurityCredentials() *AWSSecurityCredentials {
	if x != nil {
		return x.SecurityCredentials
	}
	return nil
}

type AWSSecurityCredentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code          string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	AccessKeyId   string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	LastUpdated   string `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	ExpirationRaw string `protobuf:"bytes,5,opt,name=expiration_raw,json=expirationRaw,proto3" json:"expiration_raw,omitempty"`
}

func (x *AWSSecurityCredentials) Reset() {
	*x = AWSSecurityCredentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSSecurityCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSSecurityCredentials) ProtoMessage() {}

func (x *AWSSecurityCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSSecurityCredentials.ProtoReflect.Descriptor instead.
func (*AWSSecurityCredentials) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{15}
}

func (x *AWSSecurityCredentials) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AWSSecurityCredentials) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AWSSecurityCredentials) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *AWSSecurityCredentials) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *AWSSecurityCredentials) GetExpirationRaw() string {
	if x != nil {
		return x.ExpirationRaw
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid               uint32    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	User              string    `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Gid               uint32    `protobuf:"varint,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Group             string    `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	Mode              uint32    `protobuf:"varint,5,opt,name=mode,proto3" json:"mode,omitempty"` // TODO: check conversion with uint16
	Ctime             uint64    `protobuf:"varint,6,opt,name=ctime,proto3" json:"ctime,omitempty"`
	Mtime             uint64    `protobuf:"varint,7,opt,name=mtime,proto3" json:"mtime,omitempty"`
	MountId           uint32    `protobuf:"varint,8,opt,name=mount_id,json=mountId,proto3" json:"mount_id,omitempty"`
	Inode             uint64    `protobuf:"varint,9,opt,name=inode,proto3" json:"inode,omitempty"`
	InUpperLayer      bool      `protobuf:"varint,10,opt,name=in_upper_layer,json=inUpperLayer,proto3" json:"in_upper_layer,omitempty"`
	Path              string    `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	Basename          string    `protobuf:"bytes,12,opt,name=basename,proto3" json:"basename,omitempty"`
	Filesystem        string    `protobuf:"bytes,13,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	PackageName       string    `protobuf:"bytes,14,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	PackageVersion    string    `protobuf:"bytes,15,opt,name=package_version,json=packageVersion,proto3" json:"package_version,omitempty"`
	PackageSrcversion string    `protobuf:"bytes,16,opt,name=package_srcversion,json=packageSrcversion,proto3" json:"package_srcversion,omitempty"`
	Hashes            []string  `protobuf:"bytes,17,rep,name=hashes,proto3" json:"hashes,omitempty"`
	HashState         HashState `protobuf:"varint,18,opt,name=hash_state,json=hashState,proto3,enum=datadog.cws.dumpsv1.HashState" json:"hash_state,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{16}
}

func (x *FileInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FileInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *FileInfo) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *FileInfo) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetCtime() uint64 {
	if x != nil {
		return x.Ctime
	}
	return 0
}

func (x *FileInfo) GetMtime() uint64 {
	if x != nil {
		return x.Mtime
	}
	return 0
}

func (x *FileInfo) GetMountId() uint32 {
	if x != nil {
		return x.MountId
	}
	return 0
}

func (x *FileInfo) GetInode() uint64 {
	if x != nil {
		return x.Inode
	}
	return 0
}

func (x *FileInfo) GetInUpperLayer() bool {
	if x != nil {
		return x.InUpperLayer
	}
	return false
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetBasename() string {
	if x != nil {
		return x.Basename
	}
	return ""
}

func (x *FileInfo) GetFilesystem() string {
	if x != nil {
		return x.Filesystem
	}
	return ""
}

func (x *FileInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *FileInfo) GetPackageVersion() string {
	if x != nil {
		return x.PackageVersion
	}
	return ""
}

func (x *FileInfo) GetPackageSrcversion() string {
	if x != nil {
		return x.PackageSrcversion
	}
	return ""
}

func (x *FileInfo) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *FileInfo) GetHashState() HashState {
	if x != nil {
		return x.HashState
	}
	return HashState_NO_HASH
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            uint32 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid            uint32 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	User           string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	Group          string `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	EffectiveUid   uint32 `protobuf:"varint,5,opt,name=effective_uid,json=effectiveUid,proto3" json:"effective_uid,omitempty"`
	EffectiveGid   uint32 `protobuf:"varint,6,opt,name=effective_gid,json=effectiveGid,proto3" json:"effective_gid,omitempty"`
	EffectiveUser  string `protobuf:"bytes,7,opt,name=effective_user,json=effectiveUser,proto3" json:"effective_user,omitempty"`
	EffectiveGroup string `protobuf:"bytes,8,opt,name=effective_group,json=effectiveGroup,proto3" json:"effective_group,omitempty"`
	FsUid          uint32 `protobuf:"varint,9,opt,name=fs_uid,json=fsUid,proto3" json:"fs_uid,omitempty"`
	FsGid          uint32 `protobuf:"varint,10,opt,name=fs_gid,json=fsGid,proto3" json:"fs_gid,omitempty"`
	FsUser         string `protobuf:"bytes,11,opt,name=fs_user,json=fsUser,proto3" json:"fs_user,omitempty"`
	FsGroup        string `protobuf:"bytes,12,opt,name=fs_group,json=fsGroup,proto3" json:"fs_group,omitempty"`
	CapEffective   uint64 `protobuf:"varint,13,opt,name=cap_effective,json=capEffective,proto3" json:"cap_effective,omitempty"`
	CapPermitted   uint64 `protobuf:"varint,14,opt,name=cap_permitted,json=capPermitted,proto3" json:"cap_permitted,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{17}
}

func (x *Credentials) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Credentials) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Credentials) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Credentials) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Credentials) GetEffectiveUid() uint32 {
	if x != nil {
		return x.EffectiveUid
	}
	return 0
}

func (x *Credentials) GetEffectiveGid() uint32 {
	if x != nil {
		return x.EffectiveGid
	}
	return 0
}

func (x *Credentials) GetEffectiveUser() string {
	if x != nil {
		return x.EffectiveUser
	}
	return ""
}

func (x *Credentials) GetEffectiveGroup() string {
	if x != nil {
		return x.EffectiveGroup
	}
	return ""
}

func (x *Credentials) GetFsUid() uint32 {
	if x != nil {
		return x.FsUid
	}
	return 0
}

func (x *Credentials) GetFsGid() uint32 {
	if x != nil {
		return x.FsGid
	}
	return 0
}

func (x *Credentials) GetFsUser() string {
	if x != nil {
		return x.FsUser
	}
	return ""
}

func (x *Credentials) GetFsGroup() string {
	if x != nil {
		return x.FsGroup
	}
	return ""
}

func (x *Credentials) GetCapEffective() uint64 {
	if x != nil {
		return x.CapEffective
	}
	return 0
}

func (x *Credentials) GetCapPermitted() uint64 {
	if x != nil {
		return x.CapPermitted
	}
	return 0
}

type SocketNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family string      `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Bind   []*BindNode `protobuf:"bytes,2,rep,name=bind,proto3" json:"bind,omitempty"`
}

func (x *SocketNode) Reset() {
	*x = SocketNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocketNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocketNode) ProtoMessage() {}

func (x *SocketNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocketNode.ProtoReflect.Descriptor instead.
func (*SocketNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{18}
}

func (x *SocketNode) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *SocketNode) GetBind() []*BindNode {
	if x != nil {
		return x.Bind
	}
	return nil
}

type BindNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedRules []*MatchedRule `protobuf:"bytes,3,rep,name=matched_rules,json=matchedRules,proto3" json:"matched_rules,omitempty"`
	ImageTags    []string       `protobuf:"bytes,4,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	Port         uint32         `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Ip           string         `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Protocol     uint32         `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *BindNode) Reset() {
	*x = BindNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindNode) ProtoMessage() {}

func (x *BindNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindNode.ProtoReflect.Descriptor instead.
func (*BindNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{19}
}

func (x *BindNode) GetMatchedRules() []*MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *BindNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *BindNode) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *BindNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BindNode) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type NetworkDeviceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedRules []*MatchedRule `protobuf:"bytes,1,rep,name=matched_rules,json=matchedRules,proto3" json:"matched_rules,omitempty"`
	Netns        uint32         `protobuf:"varint,2,opt,name=netns,proto3" json:"netns,omitempty"`
	Ifindex      uint32         `protobuf:"varint,3,opt,name=ifindex,proto3" json:"ifindex,omitempty"`
	Ifname       string         `protobuf:"bytes,4,opt,name=ifname,proto3" json:"ifname,omitempty"`
	FlowNodes    []*FlowNode    `protobuf:"bytes,5,rep,name=flow_nodes,json=flowNodes,proto3" json:"flow_nodes,omitempty"`
}

func (x *NetworkDeviceNode) Reset() {
	*x = NetworkDeviceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkDeviceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkDeviceNode) ProtoMessage() {}

func (x *NetworkDeviceNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkDeviceNode.ProtoReflect.Descriptor instead.
func (*NetworkDeviceNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{20}
}

func (x *NetworkDeviceNode) GetMatchedRules() []*MatchedRule {
	if x != nil {
		return x.MatchedRules
	}
	return nil
}

func (x *NetworkDeviceNode) GetNetns() uint32 {
	if x != nil {
		return x.Netns
	}
	return 0
}

func (x *NetworkDeviceNode) GetIfindex() uint32 {
	if x != nil {
		return x.Ifindex
	}
	return 0
}

func (x *NetworkDeviceNode) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (x *NetworkDeviceNode) GetFlowNodes() []*FlowNode {
	if x != nil {
		return x.FlowNodes
	}
	return nil
}

type FlowNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageTags   []string       `protobuf:"bytes,1,rep,name=image_tags,json=imageTags,proto3" json:"image_tags,omitempty"`
	Source      *IPPortContext `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Destination *IPPortContext `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	L3Protocol  uint32         `protobuf:"varint,4,opt,name=l3_protocol,json=l3Protocol,proto3" json:"l3_protocol,omitempty"`
	L4Protocol  uint32         `protobuf:"varint,5,opt,name=l4_protocol,json=l4Protocol,proto3" json:"l4_protocol,omitempty"`
	Ingress     *NetworkStats  `protobuf:"bytes,6,opt,name=ingress,proto3" json:"ingress,omitempty"`
	Egress      *NetworkStats  `protobuf:"bytes,7,opt,name=egress,proto3" json:"egress,omitempty"`
}

func (x *FlowNode) Reset() {
	*x = FlowNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowNode) ProtoMessage() {}

func (x *FlowNode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowNode.ProtoReflect.Descriptor instead.
func (*FlowNode) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{21}
}

func (x *FlowNode) GetImageTags() []string {
	if x != nil {
		return x.ImageTags
	}
	return nil
}

func (x *FlowNode) GetSource() *IPPortContext {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *FlowNode) GetDestination() *IPPortContext {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *FlowNode) GetL3Protocol() uint32 {
	if x != nil {
		return x.L3Protocol
	}
	return 0
}

func (x *FlowNode) GetL4Protocol() uint32 {
	if x != nil {
		return x.L4Protocol
	}
	return 0
}

func (x *FlowNode) GetIngress() *NetworkStats {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *FlowNode) GetEgress() *NetworkStats {
	if x != nil {
		return x.Egress
	}
	return nil
}

type IPPortContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *IPPortContext) Reset() {
	*x = IPPortContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPPortContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPPortContext) ProtoMessage() {}

func (x *IPPortContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPPortContext.ProtoReflect.Descriptor instead.
func (*IPPortContext) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{22}
}

func (x *IPPortContext) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IPPortContext) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type NetworkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSize    uint64 `protobuf:"varint,1,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	PacketCount uint64 `protobuf:"varint,2,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
}

func (x *NetworkStats) Reset() {
	*x = NetworkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStats) ProtoMessage() {}

func (x *NetworkStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStats.ProtoReflect.Descriptor instead.
func (*NetworkStats) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{23}
}

func (x *NetworkStats) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *NetworkStats) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

type MatchedRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId        string            `protobuf:"bytes,1,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleVersion   string            `protobuf:"bytes,2,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	PolicyName    string            `protobuf:"bytes,3,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyVersion string            `protobuf:"bytes,4,opt,name=policy_version,json=policyVersion,proto3" json:"policy_version,omitempty"`
	RuleTags      map[string]string `protobuf:"bytes,5,rep,name=rule_tags,json=ruleTags,proto3" json:"rule_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MatchedRule) Reset() {
	*x = MatchedRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchedRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedRule) ProtoMessage() {}

func (x *MatchedRule) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedRule.ProtoReflect.Descriptor instead.
func (*MatchedRule) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{24}
}

func (x *MatchedRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *MatchedRule) GetRuleVersion() string {
	if x != nil {
		return x.RuleVersion
	}
	return ""
}

func (x *MatchedRule) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *MatchedRule) GetPolicyVersion() string {
	if x != nil {
		return x.PolicyVersion
	}
	return ""
}

func (x *MatchedRule) GetRuleTags() map[string]string {
	if x != nil {
		return x.RuleTags
	}
	return nil
}

type EventTypeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastAnomalyNano   uint64            `protobuf:"varint,1,opt,name=last_anomaly_nano,json=lastAnomalyNano,proto3" json:"last_anomaly_nano,omitempty"`
	EventProfileState EventProfileState `protobuf:"varint,2,opt,name=event_profile_state,json=eventProfileState,proto3,enum=datadog.cws.dumpsv1.EventProfileState" json:"event_profile_state,omitempty"`
}

func (x *EventTypeState) Reset() {
	*x = EventTypeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTypeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTypeState) ProtoMessage() {}

func (x *EventTypeState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTypeState.ProtoReflect.Descriptor instead.
func (*EventTypeState) Descriptor() ([]byte, []int) {
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP(), []int{25}
}

func (x *EventTypeState) GetLastAnomalyNano() uint64 {
	if x != nil {
		return x.LastAnomalyNano
	}
	return 0
}

func (x *EventTypeState) GetEventProfileState() EventProfileState {
	if x != nil {
		return x.EventProfileState
	}
	return EventProfileState_NO_PROFILE
}

var File_proto_cws_dumpsv1_activity_dump_proto protoreflect.FileDescriptor

var file_proto_cws_dumpsv1_activity_dump_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x77, 0x73, 0x2f, 0x64, 0x75, 0x6d, 0x70,
	0x73, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x75, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x22, 0xdc, 0x01, 0x0a,
	0x07, 0x53, 0x65, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64,
	0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x67, 0x22, 0xc9, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70,
	0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x68, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d,
	0x70, 0x73, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x8d, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64,
	0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75,
	0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12,
	0x64, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x67, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64,
	0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xfc, 0x05, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70,
	0x73, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x3b, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d,
	0x70, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75,
	0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6d, 0x64, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x49, 0x4d, 0x44,
	0x53, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6d, 0x64, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x63,
	0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e,
	0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0x9d, 0x05, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x12, 0x31, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d,
	0x70, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x6f, 0x72,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63,
	0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x67, 0x76, 0x30,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x67, 0x76, 0x30, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x73,
	0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x65, 0x6e, 0x76, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x78, 0x65, 0x63, 0x43, 0x68,
	0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x36, 0x34, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x36, 0x34, 0x22,
	0xc7, 0x03, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x31, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x4c, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x31, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73,
	0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x4c, 0x0a, 0x08, 0x4f, 0x70, 0x65,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x72, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x63, 0x61, 0x6c,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x79, 0x73, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xa6,
	0x01, 0x0a, 0x08, 0x49, 0x4d, 0x44, 0x53, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73,
	0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64,
	0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x49, 0x4d, 0x44, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x49, 0x4d, 0x44, 0x53,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x03, 0x61, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31,
	0x2e, 0x41, 0x57, 0x53, 0x49, 0x4d, 0x44, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x61,
	0x77, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x41, 0x57, 0x53, 0x49, 0x4d, 0x44, 0x53, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x64, 0x73, 0x5f, 0x76,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6d, 0x64, 0x73, 0x56,
	0x32, 0x12, 0x5e, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75,
	0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x13, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x77, 0x22, 0x91, 0x04, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x72, 0x63, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x68, 0x61, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x66, 0x73, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x66, 0x73, 0x55, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x73, 0x5f, 0x67, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x73, 0x47, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x70, 0x5f, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x0a, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x31, 0x0a, 0x04, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d,
	0x70, 0x73, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x62,
	0x69, 0x6e, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x42, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x45, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77,
	0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x66, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75,
	0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x08, 0x46, 0x6c,
	0x6f, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e,
	0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x33, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x33,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c,
	0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x33, 0x0a, 0x0d, 0x49, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4e, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x64, 0x75, 0x6d, 0x70,
	0x73, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c,
	0x79, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x58, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x63, 0x77, 0x73,
	0x2e, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a,
	0xb9, 0x01, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x54, 0x48,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x57, 0x41, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x2a, 0x38, 0x0a, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55,
	0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53,
	0x48, 0x4f, 0x54, 0x10, 0x02, 0x2a, 0x90, 0x01, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x57, 0x41, 0x52, 0x4d, 0x55, 0x50, 0x10, 0x05, 0x42, 0x55, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x64, 0x2e, 0x63, 0x77, 0x73, 0x2e, 0x61, 0x64, 0x76, 0x31, 0x2e, 0x70, 0x62, 0x42, 0x0c,
	0x53, 0x65, 0x63, 0x44, 0x75, 0x6d, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x6f, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2f, 0x76, 0x35, 0x2f, 0x63, 0x77, 0x73, 0x2f, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_cws_dumpsv1_activity_dump_proto_rawDescOnce sync.Once
	file_proto_cws_dumpsv1_activity_dump_proto_rawDescData = file_proto_cws_dumpsv1_activity_dump_proto_rawDesc
)

func file_proto_cws_dumpsv1_activity_dump_proto_rawDescGZIP() []byte {
	file_proto_cws_dumpsv1_activity_dump_proto_rawDescOnce.Do(func() {
		file_proto_cws_dumpsv1_activity_dump_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_cws_dumpsv1_activity_dump_proto_rawDescData)
	})
	return file_proto_cws_dumpsv1_activity_dump_proto_rawDescData
}

var file_proto_cws_dumpsv1_activity_dump_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_cws_dumpsv1_activity_dump_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_proto_cws_dumpsv1_activity_dump_proto_goTypes = []interface{}{
	(HashState)(0),                 // 0: datadog.cws.dumpsv1.HashState
	(GenerationType)(0),            // 1: datadog.cws.dumpsv1.GenerationType
	(EventProfileState)(0),         // 2: datadog.cws.dumpsv1.event_profile_state
	(*SecDump)(nil),                // 3: datadog.cws.dumpsv1.SecDump
	(*Metadata)(nil),               // 4: datadog.cws.dumpsv1.Metadata
	(*ProfileSelector)(nil),        // 5: datadog.cws.dumpsv1.ProfileSelector
	(*ProfileContext)(nil),         // 6: datadog.cws.dumpsv1.ProfileContext
	(*SecurityProfile)(nil),        // 7: datadog.cws.dumpsv1.SecurityProfile
	(*ProcessActivityNode)(nil),    // 8: datadog.cws.dumpsv1.ProcessActivityNode
	(*ProcessInfo)(nil),            // 9: datadog.cws.dumpsv1.ProcessInfo
	(*FileActivityNode)(nil),       // 10: datadog.cws.dumpsv1.FileActivityNode
	(*OpenNode)(nil),               // 11: datadog.cws.dumpsv1.OpenNode
	(*DNSNode)(nil),                // 12: datadog.cws.dumpsv1.DNSNode
	(*DNSInfo)(nil),                // 13: datadog.cws.dumpsv1.DNSInfo
	(*SyscallNode)(nil),            // 14: datadog.cws.dumpsv1.SyscallNode
	(*IMDSNode)(nil),               // 15: datadog.cws.dumpsv1.IMDSNode
	(*IMDSEvent)(nil),              // 16: datadog.cws.dumpsv1.IMDSEvent
	(*AWSIMDSEvent)(nil),           // 17: datadog.cws.dumpsv1.AWSIMDSEvent
	(*AWSSecurityCredentials)(nil), // 18: datadog.cws.dumpsv1.AWSSecurityCredentials
	(*FileInfo)(nil),               // 19: datadog.cws.dumpsv1.FileInfo
	(*Credentials)(nil),            // 20: datadog.cws.dumpsv1.Credentials
	(*SocketNode)(nil),             // 21: datadog.cws.dumpsv1.SocketNode
	(*BindNode)(nil),               // 22: datadog.cws.dumpsv1.BindNode
	(*NetworkDeviceNode)(nil),      // 23: datadog.cws.dumpsv1.NetworkDeviceNode
	(*FlowNode)(nil),               // 24: datadog.cws.dumpsv1.FlowNode
	(*IPPortContext)(nil),          // 25: datadog.cws.dumpsv1.IPPortContext
	(*NetworkStats)(nil),           // 26: datadog.cws.dumpsv1.NetworkStats
	(*MatchedRule)(nil),            // 27: datadog.cws.dumpsv1.MatchedRule
	(*EventTypeState)(nil),         // 28: datadog.cws.dumpsv1.event_type_state
	nil,                            // 29: datadog.cws.dumpsv1.ProfileContext.EventTypeStateEntry
	nil,                            // 30: datadog.cws.dumpsv1.SecurityProfile.ProfileContextsEntry
	nil,                            // 31: datadog.cws.dumpsv1.MatchedRule.RuleTagsEntry
}
var file_proto_cws_dumpsv1_activity_dump_proto_depIdxs = []int32{
	4,  // 0: datadog.cws.dumpsv1.SecDump.metadata:type_name -> datadog.cws.dumpsv1.Metadata
	8,  // 1: datadog.cws.dumpsv1.SecDump.tree:type_name -> datadog.cws.dumpsv1.ProcessActivityNode
	29, // 2: datadog.cws.dumpsv1.ProfileContext.event_type_state:type_name -> datadog.cws.dumpsv1.ProfileContext.EventTypeStateEntry
	4,  // 3: datadog.cws.dumpsv1.SecurityProfile.metadata:type_name -> datadog.cws.dumpsv1.Metadata
	8,  // 4: datadog.cws.dumpsv1.SecurityProfile.tree:type_name -> datadog.cws.dumpsv1.ProcessActivityNode
	30, // 5: datadog.cws.dumpsv1.SecurityProfile.profile_contexts:type_name -> datadog.cws.dumpsv1.SecurityProfile.ProfileContextsEntry
	5,  // 6: datadog.cws.dumpsv1.SecurityProfile.selector:type_name -> datadog.cws.dumpsv1.ProfileSelector
	9,  // 7: datadog.cws.dumpsv1.ProcessActivityNode.process:type_name -> datadog.cws.dumpsv1.ProcessInfo
	1,  // 8: datadog.cws.dumpsv1.ProcessActivityNode.generation_type:type_name -> datadog.cws.dumpsv1.GenerationType
	27, // 9: datadog.cws.dumpsv1.ProcessActivityNode.matched_rules:type_name -> datadog.cws.dumpsv1.MatchedRule
	8,  // 10: datadog.cws.dumpsv1.ProcessActivityNode.children:type_name -> datadog.cws.dumpsv1.ProcessActivityNode
	10, // 11: datadog.cws.dumpsv1.ProcessActivityNode.files:type_name -> datadog.cws.dumpsv1.FileActivityNode
	12, // 12: datadog.cws.dumpsv1.ProcessActivityNode.dns_names:type_name -> datadog.cws.dumpsv1.DNSNode
	21, // 13: datadog.cws.dumpsv1.ProcessActivityNode.sockets:type_name -> datadog.cws.dumpsv1.SocketNode
	15, // 14: datadog.cws.dumpsv1.ProcessActivityNode.imds_events:type_name -> datadog.cws.dumpsv1.IMDSNode
	14, // 15: datadog.cws.dumpsv1.ProcessActivityNode.syscall_nodes:type_name -> datadog.cws.dumpsv1.SyscallNode
	23, // 16: datadog.cws.dumpsv1.ProcessActivityNode.network_devices:type_name -> datadog.cws.dumpsv1.NetworkDeviceNode
	19, // 17: datadog.cws.dumpsv1.ProcessInfo.file:type_name -> datadog.cws.dumpsv1.FileInfo
	20, // 18: datadog.cws.dumpsv1.ProcessInfo.credentials:type_name -> datadog.cws.dumpsv1.Credentials
	27, // 19: datadog.cws.dumpsv1.FileActivityNode.matched_rules:type_name -> datadog.cws.dumpsv1.MatchedRule
	19, // 20: datadog.cws.dumpsv1.FileActivityNode.file:type_name -> datadog.cws.dumpsv1.FileInfo
	1,  // 21: datadog.cws.dumpsv1.FileActivityNode.generation_type:type_name -> datadog.cws.dumpsv1.GenerationType
	11, // 22: datadog.cws.dumpsv1.FileActivityNode.open:type_name -> datadog.cws.dumpsv1.OpenNode
	10, // 23: datadog.cws.dumpsv1.FileActivityNode.children:type_name -> datadog.cws.dumpsv1.FileActivityNode
	27, // 24: datadog.cws.dumpsv1.DNSNode.matched_rules:type_name -> datadog.cws.dumpsv1.MatchedRule
	13, // 25: datadog.cws.dumpsv1.DNSNode.requests:type_name -> datadog.cws.dumpsv1.DNSInfo
	27, // 26: datadog.cws.dumpsv1.IMDSNode.matched_rules:type_name -> datadog.cws.dumpsv1.MatchedRule
	16, // 27: datadog.cws.dumpsv1.IMDSNode.event:type_name -> datadog.cws.dumpsv1.IMDSEvent
	17, // 28: datadog.cws.dumpsv1.IMDSEvent.aws:type_name -> datadog.cws.dumpsv1.AWSIMDSEvent
	18, // 29: datadog.cws.dumpsv1.AWSIMDSEvent.security_credentials:type_name -> datadog.cws.dumpsv1.AWSSecurityCredentials
	0,  // 30: datadog.cws.dumpsv1.FileInfo.hash_state:type_name -> datadog.cws.dumpsv1.HashState
	22, // 31: datadog.cws.dumpsv1.SocketNode.bind:type_name -> datadog.cws.dumpsv1.BindNode
	27, // 32: datadog.cws.dumpsv1.BindNode.matched_rules:type_name -> datadog.cws.dumpsv1.MatchedRule
	27, // 33: datadog.cws.dumpsv1.NetworkDeviceNode.matched_rules:type_name -> datadog.cws.dumpsv1.MatchedRule
	24, // 34: datadog.cws.dumpsv1.NetworkDeviceNode.flow_nodes:type_name -> datadog.cws.dumpsv1.FlowNode
	25, // 35: datadog.cws.dumpsv1.FlowNode.source:type_name -> datadog.cws.dumpsv1.IPPortContext
	25, // 36: datadog.cws.dumpsv1.FlowNode.destination:type_name -> datadog.cws.dumpsv1.IPPortContext
	26, // 37: datadog.cws.dumpsv1.FlowNode.ingress:type_name -> datadog.cws.dumpsv1.NetworkStats
	26, // 38: datadog.cws.dumpsv1.FlowNode.egress:type_name -> datadog.cws.dumpsv1.NetworkStats
	31, // 39: datadog.cws.dumpsv1.MatchedRule.rule_tags:type_name -> datadog.cws.dumpsv1.MatchedRule.RuleTagsEntry
	2,  // 40: datadog.cws.dumpsv1.event_type_state.event_profile_state:type_name -> datadog.cws.dumpsv1.event_profile_state
	28, // 41: datadog.cws.dumpsv1.ProfileContext.EventTypeStateEntry.value:type_name -> datadog.cws.dumpsv1.event_type_state
	6,  // 42: datadog.cws.dumpsv1.SecurityProfile.ProfileContextsEntry.value:type_name -> datadog.cws.dumpsv1.ProfileContext
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_proto_cws_dumpsv1_activity_dump_proto_init() }
func file_proto_cws_dumpsv1_activity_dump_proto_init() {
	if File_proto_cws_dumpsv1_activity_dump_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecDump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessActivityNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileActivityNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyscallNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMDSNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMDSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSIMDSEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSSecurityCredentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocketNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkDeviceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPPortContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchedRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_cws_dumpsv1_activity_dump_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTypeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_cws_dumpsv1_activity_dump_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_cws_dumpsv1_activity_dump_proto_goTypes,
		DependencyIndexes: file_proto_cws_dumpsv1_activity_dump_proto_depIdxs,
		EnumInfos:         file_proto_cws_dumpsv1_activity_dump_proto_enumTypes,
		MessageInfos:      file_proto_cws_dumpsv1_activity_dump_proto_msgTypes,
	}.Build()
	File_proto_cws_dumpsv1_activity_dump_proto = out.File
	file_proto_cws_dumpsv1_activity_dump_proto_rawDesc = nil
	file_proto_cws_dumpsv1_activity_dump_proto_goTypes = nil
	file_proto_cws_dumpsv1_activity_dump_proto_depIdxs = nil
}
