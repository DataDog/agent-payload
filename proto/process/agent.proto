syntax = "proto3";

option go_package = "github.com/DataDog/agent-payload/process";

package datadog.process_agent;

import "github.com/DataDog/agent-payload/proto/metrics/agent_payload.proto";

//
// Message Types
//

// ContainerHostType is a enum that represents the type of host detected for container collection.
// Sometimes containers are running on host-less environment, we'll need additional information to identify them
// This will help with the host resolution when we resolve container payloads
enum ContainerHostType {
	notSpecified = 0;
	fargateECS = 1;
	fargateEKS = 2;
}

message ResCollector {
	// Header must exist at position 1 for compatibility
	// with older version of the Agent. We should be able
	// to drop this at some point.
	message Header {
		int32 type = 4;
	}
	Header header = 1;
	string message = 2;
	CollectorStatus status = 3;
}

message CollectorProc {
	string hostName = 2;
	string networkId = 11;
	repeated Process processes = 3;
	Host host = 4;
	SystemInfo info = 5;
	int32 groupId = 6;
	int32 groupSize = 7;

	// Optional metadata fields
	datadog.agentpayload.KubeMetadataPayload kubernetes = 8; // DEPRECATED - left in place to support previous versions
	datadog.agentpayload.ECSMetadataPayload ecs = 9; // DEPRECATED - left in place to support previous versions

	repeated Container containers = 10;

	ContainerHostType containerHostType = 12;
}

message CollectorConnections {
	reserved 1, 4, 13;

	string hostName = 2;
	string networkId = 12;
	int64 hostId = 9; // Post-resolution field.
	repeated Connection connections = 3;

	// Message batching metadata
	int32 groupId = 5;
	int32 groupSize = 6;

	// Mapping of hostId to Host. Each `connection` has a hostId field which can be mapped here.
	// This should also include an entry for the host on which these connections were gathered.
	map<int64, Host> resolvedHosts = 7; // Post-resolution field

	// Mapping of containerId to container data. Each `connection` has a containerId field which can be mapped here.
	map<string, ContainerMetadata> resolvedContainers = 8; // Post-resolution field

	// Mapping of processes running in each container
	map<int32, string> containerForPid = 10;

	bytes encodedTags = 11;

	bytes encodedDNS = 14;

	ContainerHostType containerHostType = 15;

	CollectorConnectionsTelemetry connTelemetry = 16;

	// OS Telemetry
	string architecture = 17;
	string kernelVersion = 18;
	string platform = 19;
	string platformVersion = 20;

	NetworkTracerTelemetry tracerTelemetry = 21;

	// All queried DNS domains for which we have collected stats
	repeated string domains = 30;

	repeated Route routes = 31;
}

message CollectorRealTime {
	string hostName = 2;
	repeated ProcessStat stats = 3;
	// Post-resolved fields
	int64 hostId = 4;
	int32 orgId = 5;
	int32 groupId = 6;
	int32 groupSize = 7;
	int32 numCpus = 8;
	int64 totalMemory = 9;

	repeated ContainerStat containerStats = 10;

	ContainerHostType containerHostType = 11;
}

message CollectorContainer {
	string hostName = 1;
	string networkId = 11;
	SystemInfo info = 2;
	repeated Container containers = 3;
	int32 groupId = 4;
	int32 groupSize = 5;

	// Optional metadata fields
	datadog.agentpayload.KubeMetadataPayload kubernetes = 6; // DEPRECATED - left in place to support previous versions
	datadog.agentpayload.ECSMetadataPayload ecs = 7; // DEPRECATED - left in place to support previous versions

	// Post-resolved fields
	Host host = 8;

	ContainerHostType containerHostType = 9;
}

message CollectorContainerRealTime {
	string hostName = 1;
	repeated ContainerStat stats = 2;

	// Used for normalization at host-level.
	int32 numCpus = 3;
	int64 totalMemory = 4;

	// Post-resolved fields
	int64 hostId = 5;

	int32 groupId = 6;
	int32 groupSize = 7;

	ContainerHostType containerHostType = 8;
}

message CollectorReqStatus {
	string hostName = 2;
}

message CollectorPod {
	string hostName = 1;
	string clusterName = 2;
	string clusterId = 3;
	int32 groupId = 4;
	int32 groupSize = 5;
	repeated Pod pods = 6;
	Host host = 7; // Post-resolved field
	repeated string tags = 8;
}

message CollectorReplicaSet {
	string clusterName = 1;
	string clusterId = 2;
	int32 groupId = 3;
	int32 groupSize = 4;
	repeated ReplicaSet replicaSets = 5;
	repeated string tags = 6;
}

message CollectorDeployment {
	string clusterName = 1;
	string clusterId = 2;
	int32 groupId = 3;
	int32 groupSize = 4;
	repeated Deployment deployments = 5;
	repeated string tags = 6;
}

message CollectorService {
	string clusterName = 1;
	string clusterId = 2;
	int32 groupId = 3;
	int32 groupSize = 4;
	repeated Service services = 5;
	repeated string tags = 6;
}

message CollectorNode {
	string clusterName = 1;
	string clusterId = 2;
	int32 groupId = 3;
	int32 groupSize = 4;
	repeated Node nodes = 5;
	repeated string tags = 6;
}

message CollectorManifest {
	string clusterName = 1;
	string clusterId = 2;
	int32 groupId = 3;
	int32 groupSize = 4;
	repeated Manifest manifests = 5;
}

//
// Models
//

message CollectorStatus {
	int32 activeClients = 1;
	int32 interval = 2;
}

message Process {
	reserved 6;

	uint32 key = 1;
	int32 pid = 2;
	int32 nsPid = 20;
	Host host = 3;
	Command command = 4;
	ProcessUser user = 5;
	MemoryStat memory = 7;
	CPUStat cpu = 8;
	int64 createTime = 9;
	Container container = 10; // DEPRECATED - left in place to support previous versions
	int32 openFdCount = 11;
	ProcessState state = 12;
	IOStat ioStat = 13;
	string containerId = 14;
	uint32 containerKey = 15;
	uint64 voluntaryCtxSwitches = 16;
	uint64 involuntaryCtxSwitches = 17;
	bytes byteKey = 18;
	bytes containerByteKey = 19;
}

message Command {
	repeated string args = 1;
	string cwd = 3;
	string root = 4;
	bool onDisk = 5;
	int32 ppid = 6;
	int32 pgroup = 7;
	string exe = 8;
}

message ProcessUser {
	string name = 1;
	int32 uid = 2;
	int32 gid = 3;
	int32 euid = 4;
	int32 egid = 5;
	int32 suid = 6;
	int32 sgid = 7;
}

// status section in https://docs.docker.com/engine/api/v1.29/#tag/Container
enum ContainerState {
	unknown = 0;
	created = 1;
	restarting = 2;
	running = 3;
	paused = 4;
	exited = 5;
	dead = 6;
}

// https://blog.couchbase.com/docker-health-check-keeping-containers-healthy/
// health can be: starting, healthy, unhealthy
enum ContainerHealth {
	unknownHealth = 0;
	starting = 1;
	healthy = 2;
	unhealthy = 3;
}

// ContainerAddr records the IPs, Ports and Protocols for each container
message ContainerAddr {
	string ip = 1;
	int32 port = 2;
	ConnectionType protocol = 3;
}

message Container {
	reserved 7;

	string type = 1;
	string id = 2;
	string name = 3; // DEPRECATED - left in place to support previous versions
	string image = 4; // DEPRECATED - left in place to support previous versions
	float  cpuLimit = 5;
	uint64 memoryLimit = 6;
	ContainerState state = 8;
	ContainerHealth health = 9;
	int64 created = 10;
	float rbps = 11;
	float wbps = 12;
	uint32 key = 13; // Unique key for a container resolved on backend.
	float netRcvdPs = 14;
	float netSentPs = 15;
	float netRcvdBps = 16;
	float netSentBps = 17;
	float userPct = 18;
	float systemPct = 19;
	float totalPct = 20;
	uint64 memRss = 21;
	uint64 memCache = 22;
	Host host = 23; // Used post-resolution
	int64 started = 24;
	bytes byteKey = 25;
	repeated string tags = 26;
	repeated ContainerAddr addresses = 27;
	uint64 threadCount = 28;
	uint64 threadLimit = 29;
}

// Process state codes in http://wiki.preshweb.co.uk/doku.php?id=linux:psflags
enum ProcessState {
	U = 0; // unknown state
	D = 1;
	R = 2;
	S = 3;
	T = 4;
	W = 5;
	X = 6;
	Z = 7;
}

// ProcessStat is used for real-time process messages. It should only contain
// data that can change for a running process (and relevant information to
// generate a key). We will send a lot of these in the real-time messages so
// it's critical to keep this small.
message ProcessStat {
	int32 pid = 1;
	// In milliseconds
	int64 createTime = 2;
	MemoryStat memory = 3;
	CPUStat cpu = 4;
	int32 nice = 5;
	int32 threads = 7;
	int32 openFdCount = 8;
	uint32 key = 9;
	// we need container id because we need to do the scoring by container
	string containerId = 10;
	ContainerState containerState = 11; // DEPRECATED
	ProcessState processState = 12;
	IOStat ioStat = 19;

	// DEPRECATED: All container-level stats (except ID) have moved into ContainerStat.
	// These will be removed in the future.
	// These stats are from the container level but are stored per-process
	// because we don't send a container primitive yet.
	ContainerHealth containerHealth = 15;
	float containerRbps = 16;
	float containerWbps = 17;
	uint32 containerKey = 18;
	float containerNetRcvdPs = 20;
	float containerNetSentPs = 21;
	float containerNetRcvdBps = 22;
	float containerNetSentBps = 23;

	uint64 voluntaryCtxSwitches = 24;
	uint64 involuntaryCtxSwitches = 25;
	bytes byteKey = 26;
	bytes containerByteKey = 27;
}

// ProcStatsWithPerm is holding attributes for processes that requires extra permission to collect.
// It is used to pass data between system-probe and process-agent
message ProcStatsWithPerm {
	int32 openFDCount = 1;
	int64 readCount = 2;
	int64 writeCount = 3;
	int64 readBytes = 4;
	int64 writeBytes = 5;
}

// ProcStatsWithPermByPID stores ProcStatsWithPerm in a map with key as PIDs
message ProcStatsWithPermByPID {
	map<int32, ProcStatsWithPerm> statsByPID = 1;
}

// ContainerStat is used for real-time container messages. It should only contain
// data that can change for a running container (and relevant information to
// generate a key). We will send a lot of these in the real-time messages so
// it's critical to keep this small (basically no strings except ID)
message ContainerStat {
	string id = 1;
	float userPct = 2;
	float systemPct = 3;
	float totalPct = 4;
	float cpuLimit = 5;
	uint64 memRss = 6;
	uint64 memCache = 7;
	uint64 memLimit = 8;
	float rbps = 9;
	float wbps = 10;
	float netRcvdPs = 11;
	float netSentPs = 12;
	float netRcvdBps = 13;
	float netSentBps = 14;
	ContainerState state = 15;
	ContainerHealth health = 16;
	// Post-resolved fields
	uint32 key = 17;
	int64 started = 18;
	bytes byteKey = 19;
	uint64 threadCount = 20;
	uint64 threadLimit = 21;
}

// ContainerMetadata only holds enough information to identify a container in connection data
message ContainerMetadata {
	string id = 1;
	uint32 key = 2;
	bytes byteKey = 3;
	repeated string tags = 4;
	int32 tagIndex = 5;
	int64 tagsModified = 6;
}

message SystemInfo {
	reserved 4;

	string uuid = 1;
	OSInfo os = 2;
	repeated CPUInfo cpus = 3;
	int64 totalMemory = 5;
}

message OSInfo {
	string name = 1;
	string platform = 2;
	string family = 3;
	string version = 4;
	string kernelVersion = 5;
}

message IOStat {
	float readRate = 1;
	float writeRate = 2;
	float readBytesRate = 3;
	float writeBytesRate = 4;
}

enum ConnectionType {
	tcp = 0;
	udp = 1;
}

enum ConnectionFamily {
	v4 = 0;
	v6 = 1;
}

enum ConnectionDirection {
	unspecified = 0;
	incoming = 1;
	outgoing = 2;
	local = 3;
	none = 4;
}

message Connection {
	reserved 2, 3, 4, 7, 8, 9, 13, 14, 15;

	int32 pid = 1;
	Addr laddr = 5; // Local address
	Addr raddr = 6; // Remote address
	ConnectionFamily family = 10;
	ConnectionType type = 11;
	int64 pidCreateTime = 12;

	// Relative counters since last check
	uint64 lastBytesSent = 16;
	uint64 lastBytesReceived = 17;
	uint32 lastRetransmits = 18;
	ConnectionDirection direction = 19;

	// Network namespace
	uint32 netNS = 20;
	// NetworkID of the remote address (post-resolution field)
	string remoteNetworkId = 32;

	// the conntrack entry associated with the connection. May be null on systems which don't support querying conntrack.
	IPTranslation ipTranslation = 21;

	// TCP-specific metrics
	uint32 rtt = 22;
	uint32 rttVar = 23;
	// Indicates that this connection begins and ends on the same host
	bool intraHost = 24;

	// DNS-specific metrics
	uint32 dnsSuccessfulResponses = 25;
	uint32 dnsFailedResponses = 26;
	uint32 dnsTimeouts = 27;
	uint64 dnsSuccessLatencySum = 28;
	uint64 dnsFailureLatencySum = 29;
	map<uint32, uint32> dnsCountByRcode = 33;

	// TCP state transition counters relative to last check
	uint32 lastTcpEstablished = 30;
	uint32 lastTcpClosed = 31;

	// dns stats based on domain queried, the key corresponds to an index into the `domains` field
	map<int32, DNSStats> dnsStatsByDomain = 34;

	// http stats summarizing all http transactions recorded, organized by request path
	map<string, HTTPStats> httpStatsByPath = 35;

	int32 routeIdx = 36;
}

message Connections {
  repeated Connection conns = 1;
  map<string, DNSEntry> dns  = 2;
  ConnectionsTelemetry connTelemetry = 3;
  repeated string domains = 4;
  repeated Route routes = 5;
  NetworkTracerTelemetry tracerTelemetry = 6;
}

message Addr {
	reserved 1, 4;

	string ip = 2;
	int32  port = 3;
	string containerId = 5; // post-resolution field
	int64  hostId = 6;	// post-resolution field
}

message Route {
    Subnet subnet = 1;
}

message Subnet {
    string alias = 1;
}

message IPTranslation {
	string replSrcIP  = 1;
	string replDstIP  = 2;
	int32 replSrcPort = 3;
	int32 replDstPort = 4;
}

message MemoryStat {
	uint64 rss = 1;
	uint64 vms = 2;
	uint64 swap = 3;
	uint64 shared = 4;
	uint64 text = 5;
	uint64 lib = 6;
	uint64 data = 7;
	uint64 dirty = 8;
}

message CPUStat {
	string lastCpu = 1;
	float totalPct = 2;
	float userPct = 3;
	float systemPct = 4;
	int32 numThreads = 5;
	repeated SingleCPUStat cpus = 6;
	int32 nice = 7;
	int64 userTime = 8;
	int64 systemTime = 9;
}

message SingleCPUStat {
	string name = 1;
	float  totalPct = 2;
}

message CPUInfo {
	int32 number = 1;
	string vendor = 2;
	string family = 3;
	string model = 4;
	string physicalId = 5;
	string coreId = 6;
	int32 cores = 7;
	int64 mhz = 8;
	int32 cacheSize = 9;
}

// Host is used in backend post-resolution

message Host {
	reserved 4, 5;

	int64 id = 1;
	int32 orgId = 2;
	string name = 3;
	repeated string allTags = 6;
	int32 numCpus = 7;
	int64 totalMemory = 8;
	int32 tagIndex = 9;
	int64 tagsModified = 10;
}

message DNSEntry {
  repeated string names = 1;
}

// reference https://github.com/kubernetes/apimachinery/blob/2373d029717c4d169463414a6127cd1d0d12680e/pkg/apis/meta/v1/generated.proto#L521
message Metadata {
	string name = 1;
	string namespace = 2;
	string uid = 3;
	int64 creationTimestamp = 4;
	int64 deletionTimestamp = 5;
	repeated string labels = 6;
	repeated string annotations = 7;
	repeated OwnerReference ownerReferences = 8;
	string resourceVersion = 9;
}

message OwnerReference {
	string name = 1;
	string uid = 2;
	string kind = 3;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L4571
message ServicePort {
    string name = 1;
    string protocol = 2;
    int32 port = 3;
    string targetPort = 4; // int or str
    int32 nodePort = 5;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L4756
message ServiceSessionAffinityConfig {
    int32 clientIPTimeoutSeconds = 1;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L2107
message Node {
	Metadata metadata = 1;
	// spec reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L2312
	string podCIDR = 2;
	repeated string podCIDRs = 3;
	bool unschedulable = 4;
	repeated Taint taints = 5;
	NodeStatus status = 6;
	bytes yaml = 7;
	// we parse it from the labels. Similar to upstream https://github.com/kubernetes/kubernetes/blob/1e12d92a5179dbfeb455c79dbf9120c8536e5f9c/pkg/printers/internalversion/printers.go#L1487
	repeated string roles = 8;
	repeated string tags = 9;
	string providerID = 10;
	Host host = 11; // Used post-resolution
}


// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L2348
message NodeStatus {
	// Key/Value of a resource type and a corresponding quantity as an int64.
	map<string, int64> capacity = 1;
	// Key/Value of a resource type and a corresponding quantity as an int64.
	map<string, int64> allocatable = 2;
	// https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L2127
	// these are valid types https://github.com/kubernetes/api/blob/master/core/v1/types.go#L4739-L4753
	map<string,string> nodeAddresses = 3;
	// node status displayed by "kubectl get node"
	// mostly based on NodeCondition
	// and https://github.com/kubernetes/kubernetes/blob/1e12d92a5179dbfeb455c79dbf9120c8536e5f9c/pkg/printers/internalversion/printers.go#L1410
	string status = 4;
	string kubeletVersion = 5;
	repeated NodeCondition conditions = 6;
	repeated ContainerImage images = 7;

	// node system info reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L2411
	string kubeProxyVersion = 8;
	string operatingSystem = 9;
	string architecture = 10;
	string kernelVersion = 11;
	string osImage = 12;
	string containerRuntimeVersion = 13;
}

// reference: https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L2158
message NodeCondition {
	string type = 1;
	string status = 2;
	int64 lastTransitionTime = 3;
	string reason = 4;
	string message = 5;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L777
message ContainerImage {
	repeated string names = 1;
	int64 sizeBytes = 2;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L4849
message Taint {
	string key = 1;
	string value = 2;
	string effect = 3;
	int64 timeAdded = 4;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L4620
message ServiceSpec {
	repeated ServicePort ports = 1;
	repeated LabelSelectorRequirement selectors = 2;
	string clusterIP = 3;
	string type = 4;
	repeated string externalIPs = 5;
	string sessionAffinity = 6;
	string loadBalancerIP = 7;
	repeated string loadBalancerSourceRanges = 8;
	string externalName = 9;
	string externalTrafficPolicy = 10;
	int32 healthCheckNodePort = 11;
	bool publishNotReadyAddresses = 12;
	ServiceSessionAffinityConfig sessionAffinityConfig = 13;
	string ipFamily = 14;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto#L4748
message ServiceStatus {
	repeated string loadBalancerIngress = 17;
}

// reference https://github.com/kubernetes/kubernetes/blob/release-1.19/staging/src/k8s.io/api/core/v1/generated.proto
message Service {
	Metadata metadata = 1;
	ServiceSpec spec = 2;
	ServiceStatus status = 3;
	bytes yaml = 4;
	repeated string tags = 5;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/apps/v1/generated.proto#L221
message Deployment {
	Metadata metadata = 1;
	// spec
	int32 replicasDesired = 2;
	string deploymentStrategy = 3;
	string maxUnavailable = 4; // int or str
	string maxSurge = 5; // int or str
	bool paused = 6;
	repeated LabelSelectorRequirement selectors = 7;
	// status
	int32 replicas = 8;
	int32 updatedReplicas = 9;
	int32 readyReplicas = 10;
	int32 availableReplicas = 11;
	int32 unavailableReplicas = 12;
	string conditionMessage = 13;
	bytes yaml = 14;
	repeated string tags = 15;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/apps/v1/generated.proto#L366
message ReplicaSet {
	Metadata metadata = 1;
	// spec
	int32 replicasDesired = 2;
	repeated LabelSelectorRequirement selectors = 3;
	// status
	int32 replicas = 4;
	int32 fullyLabeledReplicas = 5;
	int32 readyReplicas = 6;
	int32 availableReplicas = 7;
	bytes yaml = 8;
	repeated string tags = 9;
}

message LabelSelectorRequirement {
  string key = 1;
  // Valid operators are In, NotIn, Exists and DoesNotExist.
  string operator = 2;
  repeated string values = 3;
}

// reference https://github.com/kubernetes/kubernetes/blob/cb19b56831d54d1d31249949318ef0b07bf00df9/staging/src/k8s.io/api/core/v1/generated.proto
message Pod {
	Metadata metadata = 1;
	// status
	string IP = 2;
	string nominatedNodeName = 3;
	string nodeName = 4;
	string phase = 5;
	int32 restartCount = 6;
	repeated ContainerStatus containerStatuses = 7;
	repeated ContainerStatus initContainerStatuses = 14;
	string conditionMessage = 8;
	string status = 9; // pod status displayed by "kubectl get pod"
	bytes yaml = 10;
	repeated string tags = 11;
	Host host = 12; // Used post-resolution
	repeated ResourceRequirements resourceRequirements = 13;
	string QOSClass = 15;
}

message ContainerStatus {
	string name = 1;
	string containerID = 2;
	bool ready = 3;
	int32 restartCount = 4;
	string state = 5;
	string message = 6;
}

message Manifest {
	string orchestrator = 1;
	string type = 2;
	string uid = 3;
	bytes content = 4;
	string contentType = 5;
	string version = 6;
}

// https://github.com/kubernetes/kubernetes/blob/4112d8db20c5550cc27d30d3cee2723db0f8e1c4/staging/src/k8s.io/api/core/v1/types.go#L2097
// Using smallest possible quantity levels.
// For memory it is bytes, for CPU it is millicore.
message ResourceRequirements{
	// Limits describes the maximum amount of compute resources allowed.
	// Key/Value of a resource type and a corresponding quantity as an int64.
	map<string, int64> limits = 1;

	// Requests describes the minimum amount of compute resources required.
	// Key/Value of a resource type and a corresponding quantity as an int64.
	map<string, int64> requests = 2;

	// Name describes the name of the holder of the resource requirements (e.g. a container name).
	string name = 3;

	// ResourceRequirementsType describes the type which uses the ResourceRequirements.
	ResourceRequirementsType type = 4;
}

enum ResourceRequirementsType {
	unknownType = 0;
	container = 1;
	initContainer = 2;
	ephemeralContainer = 3;
}

message ConnectionsTelemetry {
	int64 monotonicKprobesTriggered = 1;
	int64 monotonicKprobesMissed = 2;
	int64 monotonicConntrackRegisters = 3;
	int64 monotonicConntrackRegistersDropped = 4;
	int64 monotonicDnsPacketsProcessed = 5;
	int64 monotonicConnsClosed = 6;
	int64 connsBpfMapSize = 7;
	int64 monotonicUdpSendsProcessed = 8;
	int64 monotonicUdpSendsMissed = 9;
	int64 conntrackSamplingPercent = 10;
}

message CollectorConnectionsTelemetry {
	int64 kprobesTriggered = 1;
	int64 kprobesMissed = 2;
	int64 conntrackRegisters = 3;
	int64 conntrackRegistersDropped = 4;
	int64 dnsPacketsProcessed = 5;
	int64 connsClosed = 6;
	int64 connsBpfMapSize = 7;
	int64 udpSendsProcessed = 8;
	int64 udpSendsMissed = 9;
	int64 conntrackSamplingPercent = 10;
}

message DNSStats {
	uint32 dnsTimeouts = 1;
	uint64 dnsSuccessLatencySum = 2;
	uint64 dnsFailureLatencySum = 3;
	map<uint32, uint32> dnsCountByRcode = 4;
}

message HTTPStats {
	repeated Data statsByResponseStatus = 1;

	message Data {
		uint32 count = 1;
		bytes latencies = 2;
	}
}

enum HTTPResponseStatus {
    Info = 0;		// 1XX response
    Success = 1;	// 2XX
    Redirect = 2;	// 3XX
    ClientErr = 3;	// 4XX
    ServerErr = 4;	// 5XX
}

enum RuntimeCompilationResult {
	CompilationSuccess = 0;
	KernelVersionErr = 1;
	VerificationError = 2;
	OutputDirErr = 3;
	OutputFileErr = 4;
	NewCompilerErr = 5;
	CompilationErr = 6;
	ResultReadErr = 7;
}

message NetworkTracerTelemetry {
	bool runtimeCompilationEnabled = 1;
	RuntimeCompilationResult runtimeCompilationResult = 2;
	int64 runtimeCompilationDuration = 3;
}