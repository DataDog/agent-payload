// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/metrics/agent_payload.proto

/*
	Package gogen is a generated protocol buffer package.

	It is generated from these files:
		proto/metrics/agent_payload.proto

	It has these top-level messages:
		CommonMetadata
		ServiceChecksPayload
		EventsPayload
		SketchPayload
		ECSMetadataPayload
*/
package gogen

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CommonMetadata struct {
	AgentVersion string  `protobuf:"bytes,1,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	Timezone     string  `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	CurrentEpoch float64 `protobuf:"fixed64,3,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	InternalIp   string  `protobuf:"bytes,4,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	PublicIp     string  `protobuf:"bytes,5,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	ApiKey       string  `protobuf:"bytes,6,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *CommonMetadata) Reset()                    { *m = CommonMetadata{} }
func (m *CommonMetadata) String() string            { return proto.CompactTextString(m) }
func (*CommonMetadata) ProtoMessage()               {}
func (*CommonMetadata) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{0} }

func (m *CommonMetadata) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *CommonMetadata) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CommonMetadata) GetCurrentEpoch() float64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *CommonMetadata) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *CommonMetadata) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *CommonMetadata) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type ServiceChecksPayload struct {
	ServiceChecks []*ServiceChecksPayload_ServiceCheck `protobuf:"bytes,1,rep,name=service_checks,json=serviceChecks" json:"service_checks,omitempty"`
	Metadata      *CommonMetadata                      `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ServiceChecksPayload) Reset()         { *m = ServiceChecksPayload{} }
func (m *ServiceChecksPayload) String() string { return proto.CompactTextString(m) }
func (*ServiceChecksPayload) ProtoMessage()    {}
func (*ServiceChecksPayload) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{1}
}

func (m *ServiceChecksPayload) GetServiceChecks() []*ServiceChecksPayload_ServiceCheck {
	if m != nil {
		return m.ServiceChecks
	}
	return nil
}

func (m *ServiceChecksPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ServiceChecksPayload_ServiceCheck struct {
	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host    string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Ts      int64    `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Status  int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Tags    []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *ServiceChecksPayload_ServiceCheck) Reset()         { *m = ServiceChecksPayload_ServiceCheck{} }
func (m *ServiceChecksPayload_ServiceCheck) String() string { return proto.CompactTextString(m) }
func (*ServiceChecksPayload_ServiceCheck) ProtoMessage()    {}
func (*ServiceChecksPayload_ServiceCheck) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{1, 0}
}

func (m *ServiceChecksPayload_ServiceCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceChecksPayload_ServiceCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ServiceChecksPayload_ServiceCheck) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ServiceChecksPayload_ServiceCheck) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ServiceChecksPayload_ServiceCheck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ServiceChecksPayload_ServiceCheck) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type EventsPayload struct {
	Events   []*EventsPayload_Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Metadata *CommonMetadata        `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *EventsPayload) Reset()                    { *m = EventsPayload{} }
func (m *EventsPayload) String() string            { return proto.CompactTextString(m) }
func (*EventsPayload) ProtoMessage()               {}
func (*EventsPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{2} }

func (m *EventsPayload) GetEvents() []*EventsPayload_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventsPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventsPayload_Event struct {
	Title          string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Text           string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Ts             int64    `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Priority       string   `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Host           string   `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Tags           []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	AlertType      string   `protobuf:"bytes,7,opt,name=alert_type,json=alertType,proto3" json:"alert_type,omitempty"`
	AggregationKey string   `protobuf:"bytes,8,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	SourceTypeName string   `protobuf:"bytes,9,opt,name=source_type_name,json=sourceTypeName,proto3" json:"source_type_name,omitempty"`
}

func (m *EventsPayload_Event) Reset()         { *m = EventsPayload_Event{} }
func (m *EventsPayload_Event) String() string { return proto.CompactTextString(m) }
func (*EventsPayload_Event) ProtoMessage()    {}
func (*EventsPayload_Event) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{2, 0}
}

func (m *EventsPayload_Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventsPayload_Event) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *EventsPayload_Event) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *EventsPayload_Event) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *EventsPayload_Event) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EventsPayload_Event) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EventsPayload_Event) GetAlertType() string {
	if m != nil {
		return m.AlertType
	}
	return ""
}

func (m *EventsPayload_Event) GetAggregationKey() string {
	if m != nil {
		return m.AggregationKey
	}
	return ""
}

func (m *EventsPayload_Event) GetSourceTypeName() string {
	if m != nil {
		return m.SourceTypeName
	}
	return ""
}

type SketchPayload struct {
	Sketches []SketchPayload_Sketch `protobuf:"bytes,1,rep,name=sketches" json:"sketches"`
	Metadata CommonMetadata         `protobuf:"bytes,2,opt,name=metadata" json:"metadata"`
}

func (m *SketchPayload) Reset()                    { *m = SketchPayload{} }
func (m *SketchPayload) String() string            { return proto.CompactTextString(m) }
func (*SketchPayload) ProtoMessage()               {}
func (*SketchPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{3} }

func (m *SketchPayload) GetSketches() []SketchPayload_Sketch {
	if m != nil {
		return m.Sketches
	}
	return nil
}

func (m *SketchPayload) GetMetadata() CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return CommonMetadata{}
}

type SketchPayload_Sketch struct {
	Metric        string                              `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Host          string                              `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Distributions []SketchPayload_Sketch_Distribution `protobuf:"bytes,3,rep,name=distributions" json:"distributions"`
	Tags          []string                            `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Dogsketches   []SketchPayload_Sketch_Dogsketch    `protobuf:"bytes,7,rep,name=dogsketches" json:"dogsketches"`
}

func (m *SketchPayload_Sketch) Reset()         { *m = SketchPayload_Sketch{} }
func (m *SketchPayload_Sketch) String() string { return proto.CompactTextString(m) }
func (*SketchPayload_Sketch) ProtoMessage()    {}
func (*SketchPayload_Sketch) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{3, 0}
}

func (m *SketchPayload_Sketch) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *SketchPayload_Sketch) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SketchPayload_Sketch) GetDistributions() []SketchPayload_Sketch_Distribution {
	if m != nil {
		return m.Distributions
	}
	return nil
}

func (m *SketchPayload_Sketch) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SketchPayload_Sketch) GetDogsketches() []SketchPayload_Sketch_Dogsketch {
	if m != nil {
		return m.Dogsketches
	}
	return nil
}

type SketchPayload_Sketch_Distribution struct {
	Ts    int64     `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Cnt   int64     `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Min   float64   `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max   float64   `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	Avg   float64   `protobuf:"fixed64,5,opt,name=avg,proto3" json:"avg,omitempty"`
	Sum   float64   `protobuf:"fixed64,6,opt,name=sum,proto3" json:"sum,omitempty"`
	V     []float64 `protobuf:"fixed64,7,rep,packed,name=v" json:"v,omitempty"`
	G     []uint32  `protobuf:"varint,8,rep,packed,name=g" json:"g,omitempty"`
	Delta []uint32  `protobuf:"varint,9,rep,packed,name=delta" json:"delta,omitempty"`
	Buf   []float64 `protobuf:"fixed64,10,rep,packed,name=buf" json:"buf,omitempty"`
}

func (m *SketchPayload_Sketch_Distribution) Reset()         { *m = SketchPayload_Sketch_Distribution{} }
func (m *SketchPayload_Sketch_Distribution) String() string { return proto.CompactTextString(m) }
func (*SketchPayload_Sketch_Distribution) ProtoMessage()    {}
func (*SketchPayload_Sketch_Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{3, 0, 0}
}

func (m *SketchPayload_Sketch_Distribution) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetAvg() float64 {
	if m != nil {
		return m.Avg
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetV() []float64 {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *SketchPayload_Sketch_Distribution) GetG() []uint32 {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *SketchPayload_Sketch_Distribution) GetDelta() []uint32 {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *SketchPayload_Sketch_Distribution) GetBuf() []float64 {
	if m != nil {
		return m.Buf
	}
	return nil
}

type SketchPayload_Sketch_Dogsketch struct {
	Ts  int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Cnt int64    `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Min float64  `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max float64  `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	Avg float64  `protobuf:"fixed64,5,opt,name=avg,proto3" json:"avg,omitempty"`
	Sum float64  `protobuf:"fixed64,6,opt,name=sum,proto3" json:"sum,omitempty"`
	K   []int32  `protobuf:"zigzag32,7,rep,packed,name=k" json:"k,omitempty"`
	N   []uint32 `protobuf:"varint,8,rep,packed,name=n" json:"n,omitempty"`
}

func (m *SketchPayload_Sketch_Dogsketch) Reset()         { *m = SketchPayload_Sketch_Dogsketch{} }
func (m *SketchPayload_Sketch_Dogsketch) String() string { return proto.CompactTextString(m) }
func (*SketchPayload_Sketch_Dogsketch) ProtoMessage()    {}
func (*SketchPayload_Sketch_Dogsketch) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{3, 0, 1}
}

func (m *SketchPayload_Sketch_Dogsketch) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetAvg() float64 {
	if m != nil {
		return m.Avg
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetK() []int32 {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *SketchPayload_Sketch_Dogsketch) GetN() []uint32 {
	if m != nil {
		return m.N
	}
	return nil
}

type ECSMetadataPayload struct {
	Tasks []*ECSMetadataPayload_Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ECSMetadataPayload) Reset()                    { *m = ECSMetadataPayload{} }
func (m *ECSMetadataPayload) String() string            { return proto.CompactTextString(m) }
func (*ECSMetadataPayload) ProtoMessage()               {}
func (*ECSMetadataPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{4} }

func (m *ECSMetadataPayload) GetTasks() []*ECSMetadataPayload_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ECSMetadataPayload_Task struct {
	Arn           string                          `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	DesiredStatus string                          `protobuf:"bytes,2,opt,name=desired_status,json=desiredStatus,proto3" json:"desired_status,omitempty"`
	KnownStatus   string                          `protobuf:"bytes,3,opt,name=known_status,json=knownStatus,proto3" json:"known_status,omitempty"`
	Family        string                          `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	Version       string                          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Containers    []*ECSMetadataPayload_Container `protobuf:"bytes,6,rep,name=containers" json:"containers,omitempty"`
}

func (m *ECSMetadataPayload_Task) Reset()         { *m = ECSMetadataPayload_Task{} }
func (m *ECSMetadataPayload_Task) String() string { return proto.CompactTextString(m) }
func (*ECSMetadataPayload_Task) ProtoMessage()    {}
func (*ECSMetadataPayload_Task) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{4, 0}
}

func (m *ECSMetadataPayload_Task) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetDesiredStatus() string {
	if m != nil {
		return m.DesiredStatus
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetKnownStatus() string {
	if m != nil {
		return m.KnownStatus
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetContainers() []*ECSMetadataPayload_Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ECSMetadataPayload_Container struct {
	DockerId   string `protobuf:"bytes,1,opt,name=docker_id,json=dockerId,proto3" json:"docker_id,omitempty"`
	DockerName string `protobuf:"bytes,2,opt,name=docker_name,json=dockerName,proto3" json:"docker_name,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ECSMetadataPayload_Container) Reset()         { *m = ECSMetadataPayload_Container{} }
func (m *ECSMetadataPayload_Container) String() string { return proto.CompactTextString(m) }
func (*ECSMetadataPayload_Container) ProtoMessage()    {}
func (*ECSMetadataPayload_Container) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{4, 1}
}

func (m *ECSMetadataPayload_Container) GetDockerId() string {
	if m != nil {
		return m.DockerId
	}
	return ""
}

func (m *ECSMetadataPayload_Container) GetDockerName() string {
	if m != nil {
		return m.DockerName
	}
	return ""
}

func (m *ECSMetadataPayload_Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CommonMetadata)(nil), "datadog.agentpayload.CommonMetadata")
	proto.RegisterType((*ServiceChecksPayload)(nil), "datadog.agentpayload.ServiceChecksPayload")
	proto.RegisterType((*ServiceChecksPayload_ServiceCheck)(nil), "datadog.agentpayload.ServiceChecksPayload.ServiceCheck")
	proto.RegisterType((*EventsPayload)(nil), "datadog.agentpayload.EventsPayload")
	proto.RegisterType((*EventsPayload_Event)(nil), "datadog.agentpayload.EventsPayload.Event")
	proto.RegisterType((*SketchPayload)(nil), "datadog.agentpayload.SketchPayload")
	proto.RegisterType((*SketchPayload_Sketch)(nil), "datadog.agentpayload.SketchPayload.Sketch")
	proto.RegisterType((*SketchPayload_Sketch_Distribution)(nil), "datadog.agentpayload.SketchPayload.Sketch.Distribution")
	proto.RegisterType((*SketchPayload_Sketch_Dogsketch)(nil), "datadog.agentpayload.SketchPayload.Sketch.Dogsketch")
	proto.RegisterType((*ECSMetadataPayload)(nil), "datadog.agentpayload.ECSMetadataPayload")
	proto.RegisterType((*ECSMetadataPayload_Task)(nil), "datadog.agentpayload.ECSMetadataPayload.Task")
	proto.RegisterType((*ECSMetadataPayload_Container)(nil), "datadog.agentpayload.ECSMetadataPayload.Container")
}
func (m *CommonMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AgentVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AgentVersion)))
		i += copy(dAtA[i:], m.AgentVersion)
	}
	if len(m.Timezone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Timezone)))
		i += copy(dAtA[i:], m.Timezone)
	}
	if m.CurrentEpoch != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentEpoch))))
		i += 8
	}
	if len(m.InternalIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.InternalIp)))
		i += copy(dAtA[i:], m.InternalIp)
	}
	if len(m.PublicIp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.PublicIp)))
		i += copy(dAtA[i:], m.PublicIp)
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	return i, nil
}

func (m *ServiceChecksPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceChecksPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServiceChecks) > 0 {
		for _, msg := range m.ServiceChecks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ServiceChecksPayload_ServiceCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceChecksPayload_ServiceCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EventsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *EventsPayload_Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPayload_Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if len(m.Priority) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Priority)))
		i += copy(dAtA[i:], m.Priority)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AlertType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AlertType)))
		i += copy(dAtA[i:], m.AlertType)
	}
	if len(m.AggregationKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AggregationKey)))
		i += copy(dAtA[i:], m.AggregationKey)
	}
	if len(m.SourceTypeName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.SourceTypeName)))
		i += copy(dAtA[i:], m.SourceTypeName)
	}
	return i, nil
}

func (m *SketchPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sketches) > 0 {
		for _, msg := range m.Sketches {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
	n3, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *SketchPayload_Sketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload_Sketch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Metric)))
		i += copy(dAtA[i:], m.Metric)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Distributions) > 0 {
		for _, msg := range m.Distributions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Dogsketches) > 0 {
		for _, msg := range m.Dogsketches {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SketchPayload_Sketch_Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload_Sketch_Distribution) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Cnt))
	}
	if m.Min != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i += 8
	}
	if m.Max != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i += 8
	}
	if m.Avg != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i += 8
	}
	if m.Sum != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i += 8
	}
	if len(m.V) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.V)*8))
		for _, num := range m.V {
			f4 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f4))
			i += 8
		}
	}
	if len(m.G) > 0 {
		dAtA6 := make([]byte, len(m.G)*10)
		var j5 int
		for _, num := range m.G {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Delta) > 0 {
		dAtA8 := make([]byte, len(m.Delta)*10)
		var j7 int
		for _, num := range m.Delta {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.Buf) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Buf)*8))
		for _, num := range m.Buf {
			f9 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f9))
			i += 8
		}
	}
	return i, nil
}

func (m *SketchPayload_Sketch_Dogsketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload_Sketch_Dogsketch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if m.Cnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Cnt))
	}
	if m.Min != 0 {
		dAtA[i] = 0x19
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i += 8
	}
	if m.Max != 0 {
		dAtA[i] = 0x21
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i += 8
	}
	if m.Avg != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i += 8
	}
	if m.Sum != 0 {
		dAtA[i] = 0x31
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i += 8
	}
	if len(m.K) > 0 {
		dAtA10 := make([]byte, len(m.K)*5)
		var j11 int
		for _, num := range m.K {
			x12 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x12 >= 1<<7 {
				dAtA10[j11] = uint8(uint64(x12)&0x7f | 0x80)
				j11++
				x12 >>= 7
			}
			dAtA10[j11] = uint8(x12)
			j11++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA10[:j11])
	}
	if len(m.N) > 0 {
		dAtA14 := make([]byte, len(m.N)*10)
		var j13 int
		for _, num := range m.N {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	return i, nil
}

func (m *ECSMetadataPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECSMetadataPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ECSMetadataPayload_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECSMetadataPayload_Task) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Arn)))
		i += copy(dAtA[i:], m.Arn)
	}
	if len(m.DesiredStatus) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DesiredStatus)))
		i += copy(dAtA[i:], m.DesiredStatus)
	}
	if len(m.KnownStatus) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.KnownStatus)))
		i += copy(dAtA[i:], m.KnownStatus)
	}
	if len(m.Family) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Family)))
		i += copy(dAtA[i:], m.Family)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Containers) > 0 {
		for _, msg := range m.Containers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ECSMetadataPayload_Container) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECSMetadataPayload_Container) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DockerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DockerId)))
		i += copy(dAtA[i:], m.DockerId)
	}
	if len(m.DockerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DockerName)))
		i += copy(dAtA[i:], m.DockerName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintAgentPayload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommonMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.CurrentEpoch != 0 {
		n += 9
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *ServiceChecksPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.ServiceChecks) > 0 {
		for _, e := range m.ServiceChecks {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *ServiceChecksPayload_ServiceCheck) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Status != 0 {
		n += 1 + sovAgentPayload(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *EventsPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *EventsPayload_Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	l = len(m.Priority)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = len(m.AlertType)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.AggregationKey)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.SourceTypeName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *SketchPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.Sketches) > 0 {
		for _, e := range m.Sketches {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = m.Metadata.Size()
	n += 1 + l + sovAgentPayload(uint64(l))
	return n
}

func (m *SketchPayload_Sketch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Dogsketches) > 0 {
		for _, e := range m.Dogsketches {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *SketchPayload_Sketch_Distribution) Size() (n int) {
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Cnt != 0 {
		n += 1 + sovAgentPayload(uint64(m.Cnt))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Avg != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if len(m.V) > 0 {
		n += 1 + sovAgentPayload(uint64(len(m.V)*8)) + len(m.V)*8
	}
	if len(m.G) > 0 {
		l = 0
		for _, e := range m.G {
			l += sovAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	if len(m.Delta) > 0 {
		l = 0
		for _, e := range m.Delta {
			l += sovAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	if len(m.Buf) > 0 {
		n += 1 + sovAgentPayload(uint64(len(m.Buf)*8)) + len(m.Buf)*8
	}
	return n
}

func (m *SketchPayload_Sketch_Dogsketch) Size() (n int) {
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Cnt != 0 {
		n += 1 + sovAgentPayload(uint64(m.Cnt))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Avg != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if len(m.K) > 0 {
		l = 0
		for _, e := range m.K {
			l += sozAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	if len(m.N) > 0 {
		l = 0
		for _, e := range m.N {
			l += sovAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	return n
}

func (m *ECSMetadataPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *ECSMetadataPayload_Task) Size() (n int) {
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.DesiredStatus)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.KnownStatus)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *ECSMetadataPayload_Container) Size() (n int) {
	var l int
	_ = l
	l = len(m.DockerId)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.DockerName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func sovAgentPayload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgentPayload(x uint64) (n int) {
	return sovAgentPayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentEpoch = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceChecksPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceChecksPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceChecksPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceChecks = append(m.ServiceChecks, &ServiceChecksPayload_ServiceCheck{})
			if err := m.ServiceChecks[len(m.ServiceChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceChecksPayload_ServiceCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventsPayload_Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPayload_Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SketchPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SketchPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sketches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sketches = append(m.Sketches, SketchPayload_Sketch{})
			if err := m.Sketches[len(m.Sketches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload_Sketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, SketchPayload_Sketch_Distribution{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dogsketches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dogsketches = append(m.Dogsketches, SketchPayload_Sketch_Dogsketch{})
			if err := m.Dogsketches[len(m.Dogsketches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload_Sketch_Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.V = append(m.V, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.V = append(m.V, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.G = append(m.G, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.G = append(m.G, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Delta = append(m.Delta, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Delta = append(m.Delta, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
		case 10:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Buf = append(m.Buf, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Buf = append(m.Buf, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buf", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload_Sketch_Dogsketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dogsketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dogsketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.K = append(m.K, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.K = append(m.K, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.N = append(m.N, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.N = append(m.N, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSMetadataPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECSMetadataPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECSMetadataPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &ECSMetadataPayload_Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSMetadataPayload_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnownStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ECSMetadataPayload_Container{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSMetadataPayload_Container) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentPayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAgentPayload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgentPayload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgentPayload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentPayload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/metrics/agent_payload.proto", fileDescriptorAgentPayload) }

var fileDescriptorAgentPayload = []byte{
	// 981 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x6e, 0x23, 0xc5,
	0x13, 0xfe, 0x75, 0xc6, 0x9e, 0xd8, 0xe5, 0x3f, 0xbf, 0xd0, 0x8a, 0x96, 0x91, 0x11, 0xd9, 0x6c,
	0xf8, 0x67, 0x90, 0xe2, 0x48, 0x61, 0x25, 0xae, 0xb0, 0x4e, 0x90, 0xb2, 0x81, 0x15, 0x9a, 0xac,
	0x38, 0x20, 0xc0, 0x6a, 0xcf, 0x74, 0xc6, 0x2d, 0x7b, 0xa6, 0x47, 0xd3, 0x6d, 0x13, 0xf3, 0x08,
	0x08, 0x21, 0xf1, 0x0c, 0xbc, 0x01, 0x67, 0xee, 0xec, 0x05, 0x89, 0x27, 0x40, 0x28, 0x27, 0xde,
	0x80, 0x2b, 0xea, 0xea, 0x9e, 0x61, 0xcc, 0x7a, 0x11, 0x20, 0xc4, 0xad, 0xea, 0xab, 0xae, 0xaf,
	0xbb, 0xbf, 0xaa, 0xa9, 0x1e, 0xb8, 0x97, 0x17, 0x52, 0xcb, 0x93, 0x94, 0xeb, 0x42, 0x44, 0xea,
	0x84, 0x25, 0x3c, 0xd3, 0x93, 0x9c, 0xad, 0x17, 0x92, 0xc5, 0x23, 0x8c, 0xd1, 0xfd, 0x98, 0x69,
	0x16, 0xcb, 0x64, 0x84, 0x41, 0x17, 0x1b, 0x1c, 0x27, 0x42, 0xcf, 0x96, 0xd3, 0x51, 0x24, 0xd3,
	0x93, 0x44, 0x26, 0xf2, 0x04, 0x17, 0x4f, 0x97, 0xd7, 0xe8, 0x59, 0x56, 0x63, 0x59, 0x92, 0xa3,
	0x1f, 0x08, 0xf4, 0xc7, 0x32, 0x4d, 0x65, 0xf6, 0x3e, 0xd7, 0xcc, 0x30, 0xd2, 0x97, 0xa0, 0x67,
	0xb7, 0x5b, 0xf1, 0x42, 0x09, 0x99, 0x05, 0xe4, 0x90, 0x0c, 0xdb, 0x61, 0x17, 0xc1, 0x0f, 0x2d,
	0x46, 0x07, 0xd0, 0xd2, 0x22, 0xe5, 0x9f, 0xcb, 0x8c, 0x07, 0x3b, 0x18, 0xaf, 0x7c, 0x43, 0x10,
	0x2d, 0x8b, 0xc2, 0x50, 0xf0, 0x5c, 0x46, 0xb3, 0xc0, 0x3b, 0x24, 0x43, 0x12, 0x76, 0x1d, 0x78,
	0x6e, 0x30, 0x7a, 0x17, 0x3a, 0x22, 0xd3, 0xbc, 0xc8, 0xd8, 0x62, 0x22, 0xf2, 0xa0, 0x81, 0x1c,
	0x50, 0x42, 0x17, 0x39, 0x7d, 0x01, 0xda, 0xf9, 0x72, 0xba, 0x10, 0x91, 0x09, 0x37, 0xed, 0x16,
	0x16, 0xb8, 0xc8, 0xe9, 0xf3, 0xb0, 0xcb, 0x72, 0x31, 0x99, 0xf3, 0x75, 0xe0, 0x63, 0xc8, 0x67,
	0xb9, 0xb8, 0xe4, 0xeb, 0xa3, 0xef, 0x77, 0x60, 0xff, 0x8a, 0x17, 0x2b, 0x11, 0xf1, 0xf1, 0x8c,
	0x47, 0x73, 0xf5, 0x81, 0xd5, 0x85, 0x7e, 0x0a, 0x7d, 0x65, 0xf1, 0x49, 0x84, 0x81, 0x80, 0x1c,
	0x7a, 0xc3, 0xce, 0xe9, 0x5b, 0xa3, 0x6d, 0x32, 0x8e, 0xb6, 0x71, 0x6c, 0x80, 0x61, 0x4f, 0xd5,
	0x97, 0xd0, 0xb7, 0xa1, 0x95, 0x3a, 0x05, 0x51, 0x90, 0xce, 0xe9, 0xcb, 0xdb, 0x99, 0x37, 0xd5,
	0x0e, 0xab, 0xac, 0xc1, 0x97, 0x04, 0xba, 0xf5, 0x1d, 0x28, 0x85, 0x46, 0xc6, 0x52, 0xee, 0xf4,
	0x47, 0xdb, 0x60, 0x33, 0xa9, 0xb4, 0xd3, 0x1c, 0x6d, 0xda, 0x87, 0x1d, 0xad, 0x50, 0x64, 0x2f,
	0xdc, 0xd1, 0x8a, 0xde, 0x01, 0x5f, 0x69, 0xa6, 0x97, 0x0a, 0x55, 0x6d, 0x86, 0xce, 0xa3, 0x01,
	0xec, 0xa6, 0x5c, 0x29, 0x96, 0x70, 0xa7, 0x67, 0xe9, 0x1a, 0x56, 0xcd, 0x12, 0x15, 0xf8, 0x87,
	0x9e, 0x61, 0x35, 0xf6, 0xd1, 0x57, 0x1e, 0xf4, 0xce, 0x57, 0x3c, 0xd3, 0x95, 0x84, 0xef, 0x80,
	0xcf, 0x11, 0x70, 0xd2, 0xbd, 0xbe, 0xfd, 0x82, 0x1b, 0x49, 0xd6, 0x0b, 0x5d, 0xe2, 0xbf, 0xa0,
	0xd2, 0xaf, 0x04, 0x9a, 0xc8, 0x49, 0xf7, 0xa1, 0xa9, 0x85, 0x5e, 0x94, 0xfa, 0x58, 0x07, 0xaf,
	0xc2, 0x6f, 0x2a, 0x81, 0x8c, 0xfd, 0x94, 0x40, 0x03, 0x68, 0xe5, 0x85, 0x90, 0x85, 0xd0, 0x6b,
	0xd7, 0x78, 0x95, 0x5f, 0x09, 0xdc, 0xac, 0x09, 0xbc, 0x45, 0x1e, 0xfa, 0x22, 0x00, 0x5b, 0xf0,
	0x42, 0x4f, 0xf4, 0x3a, 0xe7, 0xc1, 0x2e, 0xae, 0x6e, 0x23, 0xf2, 0x78, 0x9d, 0x73, 0xfa, 0x1a,
	0xfc, 0x9f, 0x25, 0x49, 0xc1, 0x13, 0xa6, 0x85, 0xcc, 0xb0, 0x51, 0x5b, 0xb8, 0xa6, 0x5f, 0x83,
	0x2f, 0xf9, 0x9a, 0x0e, 0x61, 0x4f, 0xc9, 0x65, 0x11, 0x71, 0x24, 0x9a, 0x60, 0xc1, 0xdb, 0x76,
	0xa5, 0xc5, 0x0d, 0xdd, 0x23, 0x96, 0xf2, 0xa3, 0x6f, 0x7d, 0xe8, 0x5d, 0xcd, 0xb9, 0x8e, 0x66,
	0x65, 0x41, 0xde, 0x83, 0x96, 0x42, 0x80, 0x97, 0x25, 0x79, 0xe3, 0x19, 0xdd, 0x5c, 0x4f, 0x73,
	0xde, 0x83, 0xc6, 0x93, 0x9f, 0xee, 0xfe, 0x2f, 0xac, 0x18, 0xe8, 0xbb, 0xff, 0xac, 0x36, 0x25,
	0x4f, 0x55, 0xa1, 0x2f, 0x9a, 0xe0, 0xdb, 0x2d, 0x4c, 0x27, 0xda, 0x09, 0xe6, 0x6a, 0xe4, 0xbc,
	0xad, 0x5d, 0x1c, 0x41, 0x2f, 0x16, 0x4a, 0x17, 0x62, 0xba, 0x34, 0xda, 0x98, 0x7a, 0xfd, 0xd9,
	0xf7, 0xb9, 0xe5, 0x46, 0xa3, 0xb3, 0x5a, 0xbe, 0x3b, 0xd6, 0x26, 0x67, 0x55, 0xc9, 0x46, 0xad,
	0x92, 0x1f, 0x43, 0x27, 0x96, 0x49, 0x25, 0xe4, 0x2e, 0x6e, 0x7b, 0xff, 0xef, 0x6c, 0x5b, 0x66,
	0xbb, 0x3d, 0xeb, 0x74, 0x83, 0xef, 0x08, 0x74, 0xeb, 0xe7, 0x72, 0xcd, 0x48, 0xaa, 0x66, 0xdc,
	0x03, 0x2f, 0xca, 0xac, 0x14, 0x5e, 0x68, 0x4c, 0x83, 0xa4, 0x22, 0x73, 0x53, 0xd3, 0x98, 0x88,
	0xb0, 0x1b, 0xec, 0x55, 0x83, 0xb0, 0x1b, 0x83, 0xb0, 0x55, 0x82, 0x5d, 0x4a, 0x42, 0x63, 0x1a,
	0x44, 0x2d, 0x53, 0x1c, 0x87, 0x24, 0x34, 0x26, 0xed, 0x02, 0x59, 0xe1, 0x75, 0x48, 0x48, 0x56,
	0xc6, 0x4b, 0x82, 0xd6, 0xa1, 0x37, 0xec, 0x85, 0x24, 0x31, 0x1f, 0x4f, 0xcc, 0x17, 0x9a, 0x05,
	0x6d, 0x44, 0xac, 0x63, 0x38, 0xa6, 0xcb, 0xeb, 0x00, 0x30, 0xc7, 0x98, 0x83, 0xaf, 0x09, 0xb4,
	0xab, 0xfb, 0xfd, 0xb7, 0x67, 0x9f, 0xe3, 0xd9, 0x9f, 0x0b, 0xc9, 0xdc, 0x78, 0x59, 0x79, 0xf6,
	0xec, 0x61, 0xa3, 0xd5, 0xdc, 0xf3, 0x1f, 0x36, 0x5a, 0xfe, 0xde, 0x6e, 0xd8, 0xdf, 0xa8, 0xef,
	0xe5, 0x1f, 0xfc, 0xf1, 0xd1, 0x37, 0x1e, 0xd0, 0xf3, 0xf1, 0x55, 0xd9, 0xac, 0xe5, 0x97, 0x33,
	0x86, 0xa6, 0x66, 0xaa, 0x7a, 0x04, 0x8e, 0x9f, 0x31, 0xc9, 0x9e, 0x4a, 0x1c, 0x3d, 0x66, 0x6a,
	0x1e, 0xda, 0xdc, 0xc1, 0x2f, 0x04, 0x1a, 0xc6, 0xc7, 0x0b, 0x15, 0xe5, 0x3b, 0x69, 0x4c, 0xfa,
	0x0a, 0xf4, 0x63, 0xae, 0x44, 0xc1, 0xe3, 0x89, 0x1b, 0xc5, 0xb6, 0xd5, 0x7b, 0x0e, 0xbd, 0xb2,
	0x13, 0xf9, 0x1e, 0x74, 0xe7, 0x99, 0xfc, 0x2c, 0x2b, 0x17, 0x79, 0xb8, 0xa8, 0x83, 0x98, 0x5b,
	0x72, 0x07, 0xfc, 0x6b, 0x96, 0x8a, 0x45, 0x39, 0xa9, 0x9c, 0x67, 0x86, 0x79, 0xf9, 0x3e, 0xbb,
	0x61, 0xee, 0x5c, 0x1a, 0x02, 0x44, 0x32, 0xd3, 0x4c, 0x64, 0xbc, 0xb0, 0x33, 0xab, 0x73, 0x7a,
	0xfa, 0x97, 0x2f, 0x38, 0x2e, 0x53, 0xc3, 0x1a, 0xcb, 0xe0, 0x13, 0x68, 0x57, 0x01, 0xf3, 0x32,
	0xc7, 0x32, 0x9a, 0xf3, 0x62, 0x22, 0x62, 0x77, 0xe9, 0x96, 0x05, 0x2e, 0x62, 0xf3, 0xae, 0xbb,
	0x20, 0x8e, 0x32, 0x7b, 0x6d, 0xb0, 0xd0, 0x23, 0xf7, 0x82, 0x61, 0xc4, 0xfb, 0xfd, 0x55, 0x7b,
	0x70, 0xff, 0xc9, 0xed, 0x01, 0xf9, 0xf1, 0xf6, 0x80, 0xfc, 0x7c, 0x7b, 0x40, 0x3e, 0x7a, 0xb5,
	0xf6, 0x0b, 0x73, 0xc6, 0x34, 0x3b, 0x93, 0x89, 0xfd, 0x01, 0x3a, 0x76, 0xe7, 0x36, 0x3f, 0x30,
	0x3c, 0x9b, 0xfa, 0xf8, 0x0b, 0xf3, 0xe6, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0xe1, 0x01,
	0x50, 0x2c, 0x09, 0x00, 0x00,
}
