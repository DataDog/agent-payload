// Code generated by protoc-gen-gogo.
// source: agent_payload.proto
// DO NOT EDIT!

/*
	Package agent_payload is a generated protocol buffer package.

	It is generated from these files:
		agent_payload.proto

	It has these top-level messages:
		CommonMetadata
		MetricsPayload
		CheckRunsPayload
		EventsPayload
		HostMetadataPayload
*/
package agent_payload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommonMetadata struct {
	AgentVersion string  `protobuf:"bytes,1,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	Timezone     string  `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	CurrentEpoch float64 `protobuf:"fixed64,3,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	InternalIp   string  `protobuf:"bytes,4,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	PublicIp     string  `protobuf:"bytes,5,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	ApiKey       string  `protobuf:"bytes,6,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *CommonMetadata) Reset()                    { *m = CommonMetadata{} }
func (m *CommonMetadata) String() string            { return proto.CompactTextString(m) }
func (*CommonMetadata) ProtoMessage()               {}
func (*CommonMetadata) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{0} }

func (m *CommonMetadata) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *CommonMetadata) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CommonMetadata) GetCurrentEpoch() float64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *CommonMetadata) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *CommonMetadata) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *CommonMetadata) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type MetricsPayload struct {
	Samples  []*MetricsPayload_Sample `protobuf:"bytes,1,rep,name=samples" json:"samples,omitempty"`
	Metadata *CommonMetadata          `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *MetricsPayload) Reset()                    { *m = MetricsPayload{} }
func (m *MetricsPayload) String() string            { return proto.CompactTextString(m) }
func (*MetricsPayload) ProtoMessage()               {}
func (*MetricsPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{1} }

func (m *MetricsPayload) GetSamples() []*MetricsPayload_Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *MetricsPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type MetricsPayload_Sample struct {
	Metric string                         `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Type   string                         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Host   string                         `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Points []*MetricsPayload_Sample_Point `protobuf:"bytes,4,rep,name=points" json:"points,omitempty"`
	Tags   []string                       `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
}

func (m *MetricsPayload_Sample) Reset()         { *m = MetricsPayload_Sample{} }
func (m *MetricsPayload_Sample) String() string { return proto.CompactTextString(m) }
func (*MetricsPayload_Sample) ProtoMessage()    {}
func (*MetricsPayload_Sample) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{1, 0}
}

func (m *MetricsPayload_Sample) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MetricsPayload_Sample) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricsPayload_Sample) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MetricsPayload_Sample) GetPoints() []*MetricsPayload_Sample_Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *MetricsPayload_Sample) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MetricsPayload_Sample_Point struct {
	Ts    int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricsPayload_Sample_Point) Reset()         { *m = MetricsPayload_Sample_Point{} }
func (m *MetricsPayload_Sample_Point) String() string { return proto.CompactTextString(m) }
func (*MetricsPayload_Sample_Point) ProtoMessage()    {}
func (*MetricsPayload_Sample_Point) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{1, 0, 0}
}

func (m *MetricsPayload_Sample_Point) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *MetricsPayload_Sample_Point) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type CheckRunsPayload struct {
	CheckRuns []*CheckRunsPayload_CheckRun `protobuf:"bytes,1,rep,name=check_runs,json=checkRuns" json:"check_runs,omitempty"`
	Metadata  *CommonMetadata              `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *CheckRunsPayload) Reset()                    { *m = CheckRunsPayload{} }
func (m *CheckRunsPayload) String() string            { return proto.CompactTextString(m) }
func (*CheckRunsPayload) ProtoMessage()               {}
func (*CheckRunsPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{2} }

func (m *CheckRunsPayload) GetCheckRuns() []*CheckRunsPayload_CheckRun {
	if m != nil {
		return m.CheckRuns
	}
	return nil
}

func (m *CheckRunsPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type CheckRunsPayload_CheckRun struct {
	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host    string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Ts      int64    `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Status  int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Tags    []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *CheckRunsPayload_CheckRun) Reset()         { *m = CheckRunsPayload_CheckRun{} }
func (m *CheckRunsPayload_CheckRun) String() string { return proto.CompactTextString(m) }
func (*CheckRunsPayload_CheckRun) ProtoMessage()    {}
func (*CheckRunsPayload_CheckRun) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{2, 0}
}

func (m *CheckRunsPayload_CheckRun) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckRunsPayload_CheckRun) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *CheckRunsPayload_CheckRun) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *CheckRunsPayload_CheckRun) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CheckRunsPayload_CheckRun) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *CheckRunsPayload_CheckRun) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type EventsPayload struct {
	Events   []*EventsPayload_Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Metadata *CommonMetadata        `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *EventsPayload) Reset()                    { *m = EventsPayload{} }
func (m *EventsPayload) String() string            { return proto.CompactTextString(m) }
func (*EventsPayload) ProtoMessage()               {}
func (*EventsPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{3} }

func (m *EventsPayload) GetEvents() []*EventsPayload_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventsPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventsPayload_Event struct {
	Title          string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Text           string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Ts             int64    `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Priority       string   `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Host           string   `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Tags           []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
	AlertType      string   `protobuf:"bytes,7,opt,name=alert_type,json=alertType,proto3" json:"alert_type,omitempty"`
	AggregationKey string   `protobuf:"bytes,8,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	SourceTypeName string   `protobuf:"bytes,9,opt,name=source_type_name,json=sourceTypeName,proto3" json:"source_type_name,omitempty"`
}

func (m *EventsPayload_Event) Reset()         { *m = EventsPayload_Event{} }
func (m *EventsPayload_Event) String() string { return proto.CompactTextString(m) }
func (*EventsPayload_Event) ProtoMessage()    {}
func (*EventsPayload_Event) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{3, 0}
}

func (m *EventsPayload_Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventsPayload_Event) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *EventsPayload_Event) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *EventsPayload_Event) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *EventsPayload_Event) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EventsPayload_Event) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EventsPayload_Event) GetAlertType() string {
	if m != nil {
		return m.AlertType
	}
	return ""
}

func (m *EventsPayload_Event) GetAggregationKey() string {
	if m != nil {
		return m.AggregationKey
	}
	return ""
}

func (m *EventsPayload_Event) GetSourceTypeName() string {
	if m != nil {
		return m.SourceTypeName
	}
	return ""
}

type HostMetadataPayload struct {
	HostsMetadata []*HostMetadataPayload_HostMetadata `protobuf:"bytes,1,rep,name=hosts_metadata,json=hostsMetadata" json:"hosts_metadata,omitempty"`
	Metadata      *CommonMetadata                     `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *HostMetadataPayload) Reset()                    { *m = HostMetadataPayload{} }
func (m *HostMetadataPayload) String() string            { return proto.CompactTextString(m) }
func (*HostMetadataPayload) ProtoMessage()               {}
func (*HostMetadataPayload) Descriptor() ([]byte, []int) { return fileDescriptorAgentPayload, []int{4} }

func (m *HostMetadataPayload) GetHostsMetadata() []*HostMetadataPayload_HostMetadata {
	if m != nil {
		return m.HostsMetadata
	}
	return nil
}

func (m *HostMetadataPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type HostMetadataPayload_HostMetadata struct {
	Hostname string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Aliases  []string `protobuf:"bytes,3,rep,name=aliases" json:"aliases,omitempty"`
}

func (m *HostMetadataPayload_HostMetadata) Reset()         { *m = HostMetadataPayload_HostMetadata{} }
func (m *HostMetadataPayload_HostMetadata) String() string { return proto.CompactTextString(m) }
func (*HostMetadataPayload_HostMetadata) ProtoMessage()    {}
func (*HostMetadataPayload_HostMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorAgentPayload, []int{4, 0}
}

func (m *HostMetadataPayload_HostMetadata) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostMetadataPayload_HostMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *HostMetadataPayload_HostMetadata) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

func init() {
	proto.RegisterType((*CommonMetadata)(nil), "CommonMetadata")
	proto.RegisterType((*MetricsPayload)(nil), "MetricsPayload")
	proto.RegisterType((*MetricsPayload_Sample)(nil), "MetricsPayload.Sample")
	proto.RegisterType((*MetricsPayload_Sample_Point)(nil), "MetricsPayload.Sample.Point")
	proto.RegisterType((*CheckRunsPayload)(nil), "CheckRunsPayload")
	proto.RegisterType((*CheckRunsPayload_CheckRun)(nil), "CheckRunsPayload.CheckRun")
	proto.RegisterType((*EventsPayload)(nil), "EventsPayload")
	proto.RegisterType((*EventsPayload_Event)(nil), "EventsPayload.Event")
	proto.RegisterType((*HostMetadataPayload)(nil), "HostMetadataPayload")
	proto.RegisterType((*HostMetadataPayload_HostMetadata)(nil), "HostMetadataPayload.HostMetadata")
}
func (m *CommonMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AgentVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AgentVersion)))
		i += copy(dAtA[i:], m.AgentVersion)
	}
	if len(m.Timezone) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Timezone)))
		i += copy(dAtA[i:], m.Timezone)
	}
	if m.CurrentEpoch != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64AgentPayload(dAtA, i, uint64(math.Float64bits(float64(m.CurrentEpoch))))
	}
	if len(m.InternalIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.InternalIp)))
		i += copy(dAtA[i:], m.InternalIp)
	}
	if len(m.PublicIp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.PublicIp)))
		i += copy(dAtA[i:], m.PublicIp)
	}
	if len(m.ApiKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ApiKey)))
		i += copy(dAtA[i:], m.ApiKey)
	}
	return i, nil
}

func (m *MetricsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, msg := range m.Samples {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MetricsPayload_Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayload_Sample) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Metric)))
		i += copy(dAtA[i:], m.Metric)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Points) > 0 {
		for _, msg := range m.Points {
			dAtA[i] = 0x22
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MetricsPayload_Sample_Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayload_Sample_Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ts != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if m.Value != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64AgentPayload(dAtA, i, uint64(math.Float64bits(float64(m.Value))))
	}
	return i, nil
}

func (m *CheckRunsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRunsPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CheckRuns) > 0 {
		for _, msg := range m.CheckRuns {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CheckRunsPayload_CheckRun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckRunsPayload_CheckRun) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Status))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EventsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
		n3, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *EventsPayload_Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPayload_Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
	}
	if len(m.Priority) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Priority)))
		i += copy(dAtA[i:], m.Priority)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x32
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AlertType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AlertType)))
		i += copy(dAtA[i:], m.AlertType)
	}
	if len(m.AggregationKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AggregationKey)))
		i += copy(dAtA[i:], m.AggregationKey)
	}
	if len(m.SourceTypeName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.SourceTypeName)))
		i += copy(dAtA[i:], m.SourceTypeName)
	}
	return i, nil
}

func (m *HostMetadataPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostsMetadata) > 0 {
		for _, msg := range m.HostsMetadata {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Metadata != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Metadata.Size()))
		n4, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *HostMetadataPayload_HostMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataPayload_HostMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64AgentPayload(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32AgentPayload(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAgentPayload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommonMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.CurrentEpoch != 0 {
		n += 9
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *MetricsPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *MetricsPayload_Sample) Size() (n int) {
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *MetricsPayload_Sample_Point) Size() (n int) {
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *CheckRunsPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.CheckRuns) > 0 {
		for _, e := range m.CheckRuns {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *CheckRunsPayload_CheckRun) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Status != 0 {
		n += 1 + sovAgentPayload(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *EventsPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *EventsPayload_Event) Size() (n int) {
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	l = len(m.Priority)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = len(m.AlertType)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.AggregationKey)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.SourceTypeName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *HostMetadataPayload) Size() (n int) {
	var l int
	_ = l
	if len(m.HostsMetadata) > 0 {
		for _, e := range m.HostsMetadata {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *HostMetadataPayload_HostMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func sovAgentPayload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgentPayload(x uint64) (n int) {
	return sovAgentPayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.CurrentEpoch = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, &MetricsPayload_Sample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayload_Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &MetricsPayload_Sample_Point{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayload_Sample_Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRunsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRunsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRunsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckRuns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckRuns = append(m.CheckRuns, &CheckRunsPayload_CheckRun{})
			if err := m.CheckRuns[len(m.CheckRuns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckRunsPayload_CheckRun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckRun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckRun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventsPayload_Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPayload_Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostMetadataPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostMetadataPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostsMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostsMetadata = append(m.HostsMetadata, &HostMetadataPayload_HostMetadata{})
			if err := m.HostsMetadata[len(m.HostsMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataPayload_HostMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentPayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAgentPayload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgentPayload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgentPayload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentPayload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("agent_payload.proto", fileDescriptorAgentPayload) }

var fileDescriptorAgentPayload = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x94, 0xc1, 0x6e, 0xd4, 0x3a,
	0x14, 0x86, 0xaf, 0x33, 0x9d, 0xcc, 0xcc, 0x69, 0x3b, 0xad, 0xdc, 0xaa, 0x37, 0x9a, 0x7b, 0xef,
	0xdc, 0x61, 0x58, 0x30, 0x12, 0x10, 0xa1, 0xc2, 0x86, 0x2d, 0x55, 0xa5, 0x56, 0x55, 0x51, 0x15,
	0x10, 0x62, 0x17, 0xb9, 0xa9, 0x95, 0x5a, 0x4d, 0xe2, 0x28, 0x76, 0x2a, 0x86, 0x3d, 0x12, 0x8f,
	0xc0, 0x7b, 0xf0, 0x04, 0xec, 0xd8, 0x20, 0xf1, 0x08, 0xa8, 0x20, 0x5e, 0x81, 0x2d, 0xf2, 0x71,
	0x62, 0x66, 0xa0, 0x9b, 0xee, 0x7c, 0x7e, 0xff, 0xf9, 0x73, 0xce, 0x67, 0x27, 0xb0, 0xc5, 0x52,
	0x5e, 0xe8, 0xb8, 0x64, 0xf3, 0x4c, 0xb2, 0xb3, 0xb0, 0xac, 0xa4, 0x96, 0xd3, 0x4f, 0x04, 0x86,
	0x7b, 0x32, 0xcf, 0x65, 0x71, 0xcc, 0x35, 0x3b, 0x63, 0x9a, 0xd1, 0xdb, 0xb0, 0x6e, 0x9d, 0x97,
	0xbc, 0x52, 0x42, 0x16, 0x01, 0x99, 0x90, 0xd9, 0x20, 0x5a, 0x43, 0xf1, 0x85, 0xd5, 0xe8, 0x08,
	0xfa, 0x5a, 0xe4, 0xfc, 0xb5, 0x2c, 0x78, 0xe0, 0xe1, 0xbe, 0xab, 0x4d, 0x40, 0x52, 0x57, 0x95,
	0x89, 0xe0, 0xa5, 0x4c, 0xce, 0x83, 0xce, 0x84, 0xcc, 0x48, 0xb4, 0xd6, 0x88, 0xfb, 0x46, 0xa3,
	0xff, 0xc3, 0xaa, 0x28, 0x34, 0xaf, 0x0a, 0x96, 0xc5, 0xa2, 0x0c, 0x56, 0x30, 0x03, 0x5a, 0xe9,
	0xb0, 0xa4, 0xff, 0xc0, 0xa0, 0xac, 0x4f, 0x33, 0x91, 0x98, 0xed, 0xae, 0x7d, 0x85, 0x15, 0x0e,
	0x4b, 0xfa, 0x37, 0xf4, 0x58, 0x29, 0xe2, 0x0b, 0x3e, 0x0f, 0x7c, 0xdc, 0xf2, 0x59, 0x29, 0x8e,
	0xf8, 0x7c, 0xfa, 0xde, 0x83, 0xe1, 0x31, 0xd7, 0x95, 0x48, 0xd4, 0x89, 0x1d, 0x94, 0x3e, 0x80,
	0x9e, 0x62, 0x79, 0x99, 0x71, 0x15, 0x90, 0x49, 0x67, 0xb6, 0xba, 0xbb, 0x13, 0x2e, 0x3b, 0xc2,
	0x67, 0xb8, 0x1d, 0xb5, 0x36, 0x7a, 0x17, 0xfa, 0x79, 0x43, 0x03, 0x87, 0x5b, 0xdd, 0xdd, 0x08,
	0x97, 0x21, 0x45, 0xce, 0x30, 0xfa, 0x40, 0xc0, 0xb7, 0x01, 0x74, 0x07, 0xfc, 0x1c, 0x93, 0x1b,
	0x64, 0x4d, 0x45, 0x29, 0xac, 0xe8, 0x79, 0xd9, 0x82, 0xc2, 0xb5, 0xd1, 0xce, 0xa5, 0xd2, 0xc8,
	0x66, 0x10, 0xe1, 0x9a, 0x3e, 0x02, 0xbf, 0x94, 0xa2, 0xd0, 0x2a, 0x58, 0xc1, 0x46, 0xff, 0xbd,
	0xbe, 0xd1, 0xf0, 0xc4, 0x98, 0xa2, 0xc6, 0x8b, 0xe9, 0x2c, 0x55, 0x41, 0x77, 0xd2, 0xc1, 0x74,
	0x96, 0xaa, 0xd1, 0x7d, 0xe8, 0xa2, 0x89, 0x0e, 0xc1, 0xd3, 0x0a, 0xdb, 0xe9, 0x44, 0x9e, 0x56,
	0x74, 0x1b, 0xba, 0x97, 0x2c, 0xab, 0x6d, 0x2f, 0x24, 0xb2, 0xc5, 0xf4, 0x8d, 0x07, 0x9b, 0x7b,
	0xe7, 0x3c, 0xb9, 0x88, 0xea, 0xc2, 0x71, 0x7b, 0x0c, 0x90, 0x18, 0x2d, 0xae, 0xea, 0xa2, 0x45,
	0x37, 0x0a, 0x7f, 0xb7, 0x39, 0x21, 0x1a, 0x24, 0xed, 0xd6, 0xcd, 0x00, 0xbe, 0x25, 0xd0, 0x6f,
	0x43, 0xcc, 0x30, 0x05, 0xcb, 0x79, 0x03, 0x10, 0xd7, 0x0e, 0x95, 0xb7, 0x80, 0xca, 0xce, 0xd5,
	0x71, 0x73, 0xed, 0x80, 0xaf, 0x34, 0xd3, 0xb5, 0xc2, 0x9b, 0xd4, 0x8d, 0x9a, 0x8a, 0x06, 0xd0,
	0xcb, 0xb9, 0x52, 0x2c, 0xe5, 0xcd, 0x1d, 0x6a, 0x4b, 0x87, 0xcd, 0xff, 0x85, 0x6d, 0xfa, 0xcd,
	0x83, 0xf5, 0xfd, 0x4b, 0x5e, 0x68, 0x07, 0xe1, 0x1e, 0xf8, 0x1c, 0x85, 0x06, 0xc0, 0x76, 0xb8,
	0xb4, 0x6f, 0xab, 0xa8, 0xf1, 0xdc, 0x6c, 0xee, 0x1f, 0x04, 0xba, 0xf8, 0xb8, 0x39, 0x14, 0x2d,
	0x74, 0xd6, 0x4e, 0x6d, 0x0b, 0x6c, 0x90, 0xbf, 0x72, 0x63, 0x9b, 0xf5, 0x1f, 0x63, 0x8f, 0xa0,
	0x5f, 0x56, 0x42, 0x56, 0x42, 0xcf, 0x9b, 0x4f, 0xc8, 0xd5, 0x0e, 0x5b, 0x77, 0x01, 0xdb, 0x35,
	0x43, 0xd3, 0xff, 0x00, 0x58, 0xc6, 0x2b, 0x1d, 0xe3, 0x1d, 0xed, 0xa1, 0x7b, 0x80, 0xca, 0x73,
	0x73, 0x51, 0xef, 0xc0, 0x06, 0x4b, 0xd3, 0x8a, 0xa7, 0x4c, 0x0b, 0x59, 0xe0, 0x27, 0xd7, 0x47,
	0xcf, 0x70, 0x41, 0x3e, 0xe2, 0x73, 0x3a, 0x83, 0x4d, 0x25, 0xeb, 0x2a, 0xe1, 0x18, 0x14, 0xe3,
	0x31, 0x0e, 0xac, 0xd3, 0xea, 0x26, 0xee, 0x29, 0xcb, 0xf9, 0xf4, 0x3b, 0x81, 0xad, 0x03, 0xa9,
	0x74, 0x0b, 0xa5, 0x85, 0x7d, 0x00, 0x43, 0xd3, 0xa5, 0x8a, 0x1d, 0x44, 0x0b, 0xfd, 0x56, 0x78,
	0x8d, 0x7b, 0x49, 0x8b, 0xd6, 0xf1, 0x41, 0xf7, 0x0f, 0xbb, 0xd1, 0x41, 0xbc, 0x84, 0xb5, 0xc5,
	0x2c, 0x03, 0xd5, 0xa4, 0x2d, 0xdc, 0x43, 0x57, 0x3b, 0x80, 0xde, 0x02, 0xc0, 0x00, 0x7a, 0x2c,
	0x13, 0x4c, 0x71, 0x73, 0x32, 0x46, 0x6e, 0xcb, 0x27, 0x9b, 0x1f, 0xaf, 0xc6, 0xe4, 0xf3, 0xd5,
	0x98, 0x7c, 0xb9, 0x1a, 0x93, 0x77, 0x5f, 0xc7, 0x7f, 0x9d, 0xfa, 0xf8, 0xdb, 0x7d, 0xf8, 0x33,
	0x00, 0x00, 0xff, 0xff, 0xfe, 0x2f, 0x1b, 0x0d, 0x8d, 0x05, 0x00, 0x00,
}
