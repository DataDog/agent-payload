// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/contlcycle/contlcycle.proto

/*
	Package contlcycle is a generated protocol buffer package.

	It is generated from these files:
		proto/contlcycle/contlcycle.proto

	It has these top-level messages:
		EventsPaylaod
		Event
*/
package contlcycle

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EventsPaylaod_ObjectKind int32

const (
	EventsPaylaod_Cont EventsPaylaod_ObjectKind = 0
	EventsPaylaod_Pod  EventsPaylaod_ObjectKind = 1
)

var EventsPaylaod_ObjectKind_name = map[int32]string{
	0: "Cont",
	1: "Pod",
}
var EventsPaylaod_ObjectKind_value = map[string]int32{
	"Cont": 0,
	"Pod":  1,
}

func (x EventsPaylaod_ObjectKind) String() string {
	return proto.EnumName(EventsPaylaod_ObjectKind_name, int32(x))
}
func (EventsPaylaod_ObjectKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContlcycle, []int{0, 0}
}

type Event_EventType int32

const (
	Event_Delete Event_EventType = 0
)

var Event_EventType_name = map[int32]string{
	0: "Delete",
}
var Event_EventType_value = map[string]int32{
	"Delete": 0,
}

func (x Event_EventType) String() string {
	return proto.EnumName(Event_EventType_name, int32(x))
}
func (Event_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorContlcycle, []int{1, 0} }

// EventsPaylaod represents the main container lifecycle event payload
type EventsPaylaod struct {
	Version    string                   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	ObjectKind EventsPaylaod_ObjectKind `protobuf:"varint,2,opt,name=objectKind,proto3,enum=datadog.contlcycle.EventsPaylaod_ObjectKind" json:"objectKind,omitempty"`
	Host       string                   `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Events     []*Event                 `protobuf:"bytes,4,rep,name=events" json:"events,omitempty"`
}

func (m *EventsPaylaod) Reset()                    { *m = EventsPaylaod{} }
func (m *EventsPaylaod) String() string            { return proto.CompactTextString(m) }
func (*EventsPaylaod) ProtoMessage()               {}
func (*EventsPaylaod) Descriptor() ([]byte, []int) { return fileDescriptorContlcycle, []int{0} }

func (m *EventsPaylaod) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EventsPaylaod) GetObjectKind() EventsPaylaod_ObjectKind {
	if m != nil {
		return m.ObjectKind
	}
	return EventsPaylaod_Cont
}

func (m *EventsPaylaod) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EventsPaylaod) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

// Event contains the details about a container lifecycle event
type Event struct {
	EventType     Event_EventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=datadog.contlcycle.Event_EventType" json:"eventType,omitempty"`
	ObjectID      string          `protobuf:"bytes,2,opt,name=objectID,proto3" json:"objectID,omitempty"`
	Source        string          `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	ExitCode      int32           `protobuf:"varint,4,opt,name=exitCode,proto3" json:"exitCode,omitempty"`
	ExitTimestamp int64           `protobuf:"varint,5,opt,name=exitTimestamp,proto3" json:"exitTimestamp,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorContlcycle, []int{1} }

func (m *Event) GetEventType() Event_EventType {
	if m != nil {
		return m.EventType
	}
	return Event_Delete
}

func (m *Event) GetObjectID() string {
	if m != nil {
		return m.ObjectID
	}
	return ""
}

func (m *Event) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Event) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *Event) GetExitTimestamp() int64 {
	if m != nil {
		return m.ExitTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*EventsPaylaod)(nil), "datadog.contlcycle.EventsPaylaod")
	proto.RegisterType((*Event)(nil), "datadog.contlcycle.Event")
	proto.RegisterEnum("datadog.contlcycle.EventsPaylaod_ObjectKind", EventsPaylaod_ObjectKind_name, EventsPaylaod_ObjectKind_value)
	proto.RegisterEnum("datadog.contlcycle.Event_EventType", Event_EventType_name, Event_EventType_value)
}
func (m *EventsPaylaod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPaylaod) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.ObjectKind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(m.ObjectKind))
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Events) > 0 {
		for _, msg := range m.Events {
			dAtA[i] = 0x22
			i++
			i = encodeVarintContlcycle(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(m.EventType))
	}
	if len(m.ObjectID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(len(m.ObjectID)))
		i += copy(dAtA[i:], m.ObjectID)
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if m.ExitCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(m.ExitCode))
	}
	if m.ExitTimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintContlcycle(dAtA, i, uint64(m.ExitTimestamp))
	}
	return i, nil
}

func encodeVarintContlcycle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventsPaylaod) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovContlcycle(uint64(l))
	}
	if m.ObjectKind != 0 {
		n += 1 + sovContlcycle(uint64(m.ObjectKind))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovContlcycle(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovContlcycle(uint64(l))
		}
	}
	return n
}

func (m *Event) Size() (n int) {
	var l int
	_ = l
	if m.EventType != 0 {
		n += 1 + sovContlcycle(uint64(m.EventType))
	}
	l = len(m.ObjectID)
	if l > 0 {
		n += 1 + l + sovContlcycle(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovContlcycle(uint64(l))
	}
	if m.ExitCode != 0 {
		n += 1 + sovContlcycle(uint64(m.ExitCode))
	}
	if m.ExitTimestamp != 0 {
		n += 1 + sovContlcycle(uint64(m.ExitTimestamp))
	}
	return n
}

func sovContlcycle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContlcycle(x uint64) (n int) {
	return sovContlcycle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventsPaylaod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContlcycle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsPaylaod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsPaylaod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContlcycle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectKind", wireType)
			}
			m.ObjectKind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectKind |= (EventsPaylaod_ObjectKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContlcycle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContlcycle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContlcycle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContlcycle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContlcycle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= (Event_EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContlcycle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContlcycle
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitCode", wireType)
			}
			m.ExitCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitTimestamp", wireType)
			}
			m.ExitTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExitTimestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContlcycle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContlcycle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContlcycle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContlcycle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContlcycle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContlcycle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContlcycle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContlcycle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContlcycle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContlcycle   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/contlcycle/contlcycle.proto", fileDescriptorContlcycle) }

var fileDescriptorContlcycle = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x41, 0x4f, 0xea, 0x40,
	0x10, 0xc7, 0xd9, 0xd7, 0x52, 0xe8, 0xbc, 0x40, 0xc8, 0x1e, 0xde, 0xab, 0x1e, 0xb0, 0x56, 0x0f,
	0x3d, 0x68, 0x1b, 0x31, 0xde, 0xbc, 0x28, 0xf5, 0x60, 0x34, 0x91, 0x34, 0x9c, 0xbc, 0x2d, 0xdd,
	0x4d, 0xa9, 0x29, 0x9d, 0x86, 0x2e, 0xc4, 0x7e, 0x43, 0x8f, 0x5e, 0x3d, 0x69, 0xf8, 0x24, 0x86,
	0x05, 0x0b, 0xc4, 0x70, 0xd9, 0xcc, 0x7f, 0x67, 0x7e, 0x33, 0xfb, 0xdf, 0x0c, 0x1c, 0xe7, 0x53,
	0x94, 0xe8, 0x47, 0x98, 0xc9, 0x34, 0x2a, 0xa3, 0x54, 0x6c, 0x85, 0x9e, 0xca, 0x51, 0xca, 0x99,
	0x64, 0x1c, 0x63, 0x6f, 0x93, 0x71, 0x3e, 0x09, 0xb4, 0xee, 0xe6, 0x22, 0x93, 0xc5, 0x80, 0x95,
	0x29, 0x43, 0x4e, 0x2d, 0x68, 0xcc, 0xc5, 0xb4, 0x48, 0x30, 0xb3, 0x88, 0x4d, 0x5c, 0x33, 0xfc,
	0x91, 0xf4, 0x11, 0x00, 0x47, 0x2f, 0x22, 0x92, 0x0f, 0x49, 0xc6, 0xad, 0x3f, 0x36, 0x71, 0xdb,
	0xbd, 0x33, 0xef, 0x77, 0x53, 0x6f, 0xa7, 0xa1, 0xf7, 0x54, 0x31, 0xe1, 0x16, 0x4f, 0x29, 0xe8,
	0x63, 0x2c, 0xa4, 0xa5, 0xa9, 0x21, 0x2a, 0xa6, 0x17, 0x60, 0x08, 0xc5, 0x5a, 0xba, 0xad, 0xb9,
	0x7f, 0x7b, 0x07, 0x7b, 0xbb, 0x87, 0xeb, 0x42, 0xe7, 0x08, 0x60, 0x33, 0x80, 0x36, 0x41, 0xef,
	0x63, 0x26, 0x3b, 0x35, 0xda, 0x00, 0x6d, 0x80, 0xbc, 0x43, 0x9c, 0x0f, 0x02, 0x75, 0x85, 0xd0,
	0x1b, 0x30, 0x15, 0x34, 0x2c, 0x73, 0xa1, 0xbc, 0xb5, 0x7b, 0x27, 0x7b, 0x07, 0xac, 0xce, 0x65,
	0x69, 0xb8, 0xa1, 0xe8, 0x21, 0x34, 0x57, 0x16, 0xee, 0x03, 0xf5, 0x01, 0x66, 0x58, 0x69, 0xfa,
	0x0f, 0x8c, 0x02, 0x67, 0xd3, 0x48, 0xac, 0x2d, 0xad, 0xd5, 0x92, 0x11, 0xaf, 0x89, 0xec, 0x23,
	0x17, 0x96, 0x6e, 0x13, 0xb7, 0x1e, 0x56, 0x9a, 0x9e, 0x42, 0x6b, 0x19, 0x0f, 0x93, 0x89, 0x28,
	0x24, 0x9b, 0xe4, 0x56, 0xdd, 0x26, 0xae, 0x16, 0xee, 0x5e, 0x3a, 0xff, 0xc1, 0xac, 0x5e, 0x43,
	0x01, 0x8c, 0x40, 0xa4, 0x42, 0x8a, 0x4e, 0xed, 0xf6, 0xfa, 0x6d, 0xd1, 0x25, 0xef, 0x8b, 0x2e,
	0xf9, 0x5a, 0x74, 0xc9, 0xb3, 0x17, 0x27, 0x72, 0x3c, 0x1b, 0x79, 0x11, 0x4e, 0xfc, 0x80, 0x49,
	0x16, 0x60, 0xec, 0xb3, 0x58, 0x64, 0xf2, 0x3c, 0x67, 0x65, 0x8a, 0x8c, 0xfb, 0xf3, 0xab, 0xad,
	0xad, 0x18, 0x19, 0x6a, 0x2d, 0x2e, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xa5, 0xc4, 0xed,
	0x3b, 0x02, 0x00, 0x00,
}
