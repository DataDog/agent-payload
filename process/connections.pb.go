// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: proto/process/connections.proto

package process

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuntimeCompilationResult int32

const (
	RuntimeCompilationResult_NotAttempted        RuntimeCompilationResult = 0
	RuntimeCompilationResult_CompilationSuccess  RuntimeCompilationResult = 1
	RuntimeCompilationResult_KernelVersionErr    RuntimeCompilationResult = 2
	RuntimeCompilationResult_VerificationError   RuntimeCompilationResult = 3
	RuntimeCompilationResult_OutputDirErr        RuntimeCompilationResult = 4
	RuntimeCompilationResult_OutputFileErr       RuntimeCompilationResult = 5
	RuntimeCompilationResult_NewCompilerErr      RuntimeCompilationResult = 6
	RuntimeCompilationResult_CompilationErr      RuntimeCompilationResult = 7
	RuntimeCompilationResult_ResultReadErr       RuntimeCompilationResult = 8
	RuntimeCompilationResult_HeaderFetchErr      RuntimeCompilationResult = 9
	RuntimeCompilationResult_CompiledOutputFound RuntimeCompilationResult = 10
	RuntimeCompilationResult_InputHashError      RuntimeCompilationResult = 11
)

// Enum value maps for RuntimeCompilationResult.
var (
	RuntimeCompilationResult_name = map[int32]string{
		0:  "NotAttempted",
		1:  "CompilationSuccess",
		2:  "KernelVersionErr",
		3:  "VerificationError",
		4:  "OutputDirErr",
		5:  "OutputFileErr",
		6:  "NewCompilerErr",
		7:  "CompilationErr",
		8:  "ResultReadErr",
		9:  "HeaderFetchErr",
		10: "CompiledOutputFound",
		11: "InputHashError",
	}
	RuntimeCompilationResult_value = map[string]int32{
		"NotAttempted":        0,
		"CompilationSuccess":  1,
		"KernelVersionErr":    2,
		"VerificationError":   3,
		"OutputDirErr":        4,
		"OutputFileErr":       5,
		"NewCompilerErr":      6,
		"CompilationErr":      7,
		"ResultReadErr":       8,
		"HeaderFetchErr":      9,
		"CompiledOutputFound": 10,
		"InputHashError":      11,
	}
)

func (x RuntimeCompilationResult) Enum() *RuntimeCompilationResult {
	p := new(RuntimeCompilationResult)
	*p = x
	return p
}

func (x RuntimeCompilationResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeCompilationResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[0].Descriptor()
}

func (RuntimeCompilationResult) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[0]
}

func (x RuntimeCompilationResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeCompilationResult.Descriptor instead.
func (RuntimeCompilationResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{0}
}

type KernelHeaderFetchResult int32

const (
	KernelHeaderFetchResult_FetchNotAttempted               KernelHeaderFetchResult = 0
	KernelHeaderFetchResult_CustomHeadersFound              KernelHeaderFetchResult = 1
	KernelHeaderFetchResult_DefaultHeadersFound             KernelHeaderFetchResult = 2
	KernelHeaderFetchResult_SysfsHeadersFound               KernelHeaderFetchResult = 3
	KernelHeaderFetchResult_DownloadedHeadersFound          KernelHeaderFetchResult = 4
	KernelHeaderFetchResult_DownloadSuccess                 KernelHeaderFetchResult = 5
	KernelHeaderFetchResult_HostVersionErr                  KernelHeaderFetchResult = 6
	KernelHeaderFetchResult_DownloadFailure                 KernelHeaderFetchResult = 7
	KernelHeaderFetchResult_ValidationFailure               KernelHeaderFetchResult = 8
	KernelHeaderFetchResult_ReposDirAccessFailure           KernelHeaderFetchResult = 9
	KernelHeaderFetchResult_HeadersNotFoundDownloadDisabled KernelHeaderFetchResult = 10
)

// Enum value maps for KernelHeaderFetchResult.
var (
	KernelHeaderFetchResult_name = map[int32]string{
		0:  "FetchNotAttempted",
		1:  "CustomHeadersFound",
		2:  "DefaultHeadersFound",
		3:  "SysfsHeadersFound",
		4:  "DownloadedHeadersFound",
		5:  "DownloadSuccess",
		6:  "HostVersionErr",
		7:  "DownloadFailure",
		8:  "ValidationFailure",
		9:  "ReposDirAccessFailure",
		10: "HeadersNotFoundDownloadDisabled",
	}
	KernelHeaderFetchResult_value = map[string]int32{
		"FetchNotAttempted":               0,
		"CustomHeadersFound":              1,
		"DefaultHeadersFound":             2,
		"SysfsHeadersFound":               3,
		"DownloadedHeadersFound":          4,
		"DownloadSuccess":                 5,
		"HostVersionErr":                  6,
		"DownloadFailure":                 7,
		"ValidationFailure":               8,
		"ReposDirAccessFailure":           9,
		"HeadersNotFoundDownloadDisabled": 10,
	}
)

func (x KernelHeaderFetchResult) Enum() *KernelHeaderFetchResult {
	p := new(KernelHeaderFetchResult)
	*p = x
	return p
}

func (x KernelHeaderFetchResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KernelHeaderFetchResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[1].Descriptor()
}

func (KernelHeaderFetchResult) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[1]
}

func (x KernelHeaderFetchResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KernelHeaderFetchResult.Descriptor instead.
func (KernelHeaderFetchResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{1}
}

type COREResult int32

const (
	COREResult_SuccessCustomBTF   COREResult = 0
	COREResult_SuccessEmbeddedBTF COREResult = 1
	COREResult_SuccessDefaultBTF  COREResult = 2
	COREResult_BtfNotFound        COREResult = 3
	COREResult_AssetReadError     COREResult = 4
	COREResult_VerifierError      COREResult = 5
	COREResult_LoaderError        COREResult = 6
)

// Enum value maps for COREResult.
var (
	COREResult_name = map[int32]string{
		0: "SuccessCustomBTF",
		1: "SuccessEmbeddedBTF",
		2: "SuccessDefaultBTF",
		3: "BtfNotFound",
		4: "AssetReadError",
		5: "VerifierError",
		6: "LoaderError",
	}
	COREResult_value = map[string]int32{
		"SuccessCustomBTF":   0,
		"SuccessEmbeddedBTF": 1,
		"SuccessDefaultBTF":  2,
		"BtfNotFound":        3,
		"AssetReadError":     4,
		"VerifierError":      5,
		"LoaderError":        6,
	}
)

func (x COREResult) Enum() *COREResult {
	p := new(COREResult)
	*p = x
	return p
}

func (x COREResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (COREResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[2].Descriptor()
}

func (COREResult) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[2]
}

func (x COREResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use COREResult.Descriptor instead.
func (COREResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{2}
}

type ConnectionFamily int32

const (
	ConnectionFamily_v4 ConnectionFamily = 0
	ConnectionFamily_v6 ConnectionFamily = 1
)

// Enum value maps for ConnectionFamily.
var (
	ConnectionFamily_name = map[int32]string{
		0: "v4",
		1: "v6",
	}
	ConnectionFamily_value = map[string]int32{
		"v4": 0,
		"v6": 1,
	}
)

func (x ConnectionFamily) Enum() *ConnectionFamily {
	p := new(ConnectionFamily)
	*p = x
	return p
}

func (x ConnectionFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[3].Descriptor()
}

func (ConnectionFamily) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[3]
}

func (x ConnectionFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionFamily.Descriptor instead.
func (ConnectionFamily) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{3}
}

type ConnectionDirection int32

const (
	ConnectionDirection_unspecified ConnectionDirection = 0
	ConnectionDirection_incoming    ConnectionDirection = 1
	ConnectionDirection_outgoing    ConnectionDirection = 2
	ConnectionDirection_local       ConnectionDirection = 3
	ConnectionDirection_none        ConnectionDirection = 4
)

// Enum value maps for ConnectionDirection.
var (
	ConnectionDirection_name = map[int32]string{
		0: "unspecified",
		1: "incoming",
		2: "outgoing",
		3: "local",
		4: "none",
	}
	ConnectionDirection_value = map[string]int32{
		"unspecified": 0,
		"incoming":    1,
		"outgoing":    2,
		"local":       3,
		"none":        4,
	}
)

func (x ConnectionDirection) Enum() *ConnectionDirection {
	p := new(ConnectionDirection)
	*p = x
	return p
}

func (x ConnectionDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[4].Descriptor()
}

func (ConnectionDirection) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[4]
}

func (x ConnectionDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionDirection.Descriptor instead.
func (ConnectionDirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{4}
}

type EphemeralPortState int32

const (
	EphemeralPortState_ephemeralUnspecified EphemeralPortState = 0
	EphemeralPortState_ephemeralTrue        EphemeralPortState = 1
	EphemeralPortState_ephemeralFalse       EphemeralPortState = 2
)

// Enum value maps for EphemeralPortState.
var (
	EphemeralPortState_name = map[int32]string{
		0: "ephemeralUnspecified",
		1: "ephemeralTrue",
		2: "ephemeralFalse",
	}
	EphemeralPortState_value = map[string]int32{
		"ephemeralUnspecified": 0,
		"ephemeralTrue":        1,
		"ephemeralFalse":       2,
	}
)

func (x EphemeralPortState) Enum() *EphemeralPortState {
	p := new(EphemeralPortState)
	*p = x
	return p
}

func (x EphemeralPortState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EphemeralPortState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[5].Descriptor()
}

func (EphemeralPortState) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[5]
}

func (x EphemeralPortState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EphemeralPortState.Descriptor instead.
func (EphemeralPortState) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{5}
}

type ProtocolType int32

const (
	ProtocolType_protocolUnclassified ProtocolType = 0
	ProtocolType_protocolUnknown      ProtocolType = 1
	ProtocolType_protocolHTTP         ProtocolType = 2
	ProtocolType_protocolHTTP2        ProtocolType = 3
	ProtocolType_protocolTLS          ProtocolType = 4
	ProtocolType_protocolKafka        ProtocolType = 5
	ProtocolType_protocolMongo        ProtocolType = 6
	ProtocolType_protocolPostgres     ProtocolType = 7
	ProtocolType_protocolAMQP         ProtocolType = 8
	ProtocolType_protocolRedis        ProtocolType = 9
	ProtocolType_protocolMySQL        ProtocolType = 10
	ProtocolType_protocolGRPC         ProtocolType = 11
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0:  "protocolUnclassified",
		1:  "protocolUnknown",
		2:  "protocolHTTP",
		3:  "protocolHTTP2",
		4:  "protocolTLS",
		5:  "protocolKafka",
		6:  "protocolMongo",
		7:  "protocolPostgres",
		8:  "protocolAMQP",
		9:  "protocolRedis",
		10: "protocolMySQL",
		11: "protocolGRPC",
	}
	ProtocolType_value = map[string]int32{
		"protocolUnclassified": 0,
		"protocolUnknown":      1,
		"protocolHTTP":         2,
		"protocolHTTP2":        3,
		"protocolTLS":          4,
		"protocolKafka":        5,
		"protocolMongo":        6,
		"protocolPostgres":     7,
		"protocolAMQP":         8,
		"protocolRedis":        9,
		"protocolMySQL":        10,
		"protocolGRPC":         11,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_process_connections_proto_enumTypes[6].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_proto_process_connections_proto_enumTypes[6]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{6}
}

type CollectorConnections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the detected hostname for the agent that collected these connections
	HostName string `protobuf:"bytes,2,opt,name=hostName,proto3" json:"hostName,omitempty"`
	// this "ID" of the network. This is generally set to VPC ID in the major clouds.
	NetworkId   string        `protobuf:"bytes,12,opt,name=networkId,proto3" json:"networkId,omitempty"`
	Connections []*Connection `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty"`
	// Message batching metadata
	GroupId   int32 `protobuf:"varint,5,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupSize int32 `protobuf:"varint,6,opt,name=groupSize,proto3" json:"groupSize,omitempty"`
	// Mapping of resourceID to metadata. For containers, each `connection` has a containerId field which can be mapped here.
	ResolvedResources map[string]*ResourceMetadata `protobuf:"bytes,8,rep,name=resolvedResources,proto3" json:"resolvedResources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Post-resolution field
	// Mapping of processes running in each container
	ContainerForPid map[int32]string `protobuf:"bytes,10,rep,name=containerForPid,proto3" json:"containerForPid,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// encodedTags is an opaque byte format that stores several sets of tags in a way that
	// is both Go GC friendly and handles duplicate tags well.
	//
	// Think of it as a write-once datastructure that maps a TagIndex (int)  -> []string. Types like ResourceMetadata
	// and Host reference 'tagIndexes' that can be used with an `encodedTags` to get a list of actual tags (in the form of a []string)
	//
	// this tag buffer can be written with `NewV2TagEncoder` and read with the helpers `CollectorConnections#GetTags` and `CollectorConnections#UnsafeIterateTags`.
	//
	// see process/tags_v2.go for a detailed explanation of the format.
	EncodedTags []byte `protobuf:"bytes,11,opt,name=encodedTags,proto3" json:"encodedTags,omitempty"`
	// This uses the same encoding structure as `encodedTags` but specifically encodes tags for connection-level tags
	// (e.g. Connection#TagIdx)
	EncodedConnectionsTags []byte            `protobuf:"bytes,38,opt,name=encodedConnectionsTags,proto3" json:"encodedConnectionsTags,omitempty"`
	ContainerHostType      ContainerHostType `protobuf:"varint,15,opt,name=containerHostType,proto3,enum=datadog.process_agent.ContainerHostType" json:"containerHostType,omitempty"`
	// For now, we'll keep emitting telemetry from agents < 7.35
	ConnTelemetry    *CollectorConnectionsTelemetry `protobuf:"bytes,16,opt,name=connTelemetry,proto3" json:"connTelemetry,omitempty"`
	ConnTelemetryMap map[string]int64               `protobuf:"bytes,39,rep,name=connTelemetryMap,proto3" json:"connTelemetryMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// OS Telemetry
	Architecture    string `protobuf:"bytes,17,opt,name=architecture,proto3" json:"architecture,omitempty"`
	KernelVersion   string `protobuf:"bytes,18,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	Platform        string `protobuf:"bytes,19,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformVersion string `protobuf:"bytes,20,opt,name=platformVersion,proto3" json:"platformVersion,omitempty"`
	// Runtime compilation telemetry
	CompilationTelemetryByAsset map[string]*RuntimeCompilationTelemetry `protobuf:"bytes,21,rep,name=compilationTelemetryByAsset,proto3" json:"compilationTelemetryByAsset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KernelHeaderFetchResult     KernelHeaderFetchResult                 `protobuf:"varint,41,opt,name=kernelHeaderFetchResult,proto3,enum=datadog.process_agent.KernelHeaderFetchResult" json:"kernelHeaderFetchResult,omitempty"`
	// CO-RE telemetry
	CORETelemetryByAsset map[string]COREResult `protobuf:"bytes,42,rep,name=CORETelemetryByAsset,proto3" json:"CORETelemetryByAsset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=datadog.process_agent.COREResult"`
	// Prebuilt EBPF assets in use
	PrebuiltEBPFAssets []string `protobuf:"bytes,44,rep,name=PrebuiltEBPFAssets,proto3" json:"PrebuiltEBPFAssets,omitempty"`
	// the machine-local routes used for all connections in this payload. At the time of writing, this
	// captures the subnet of the interface used to send traffic out of machine. This is also AWS only at the time
	// of writing.
	// see Connection#routeIdx
	Routes []*Route `protobuf:"bytes,31,rep,name=routes,proto3" json:"routes,omitempty"`
	// the next l3 route for all connections in this payload, AWS only.
	RouteMetadata      []*RouteMetadata    `protobuf:"bytes,34,rep,name=routeMetadata,proto3" json:"routeMetadata,omitempty"` // backend use only
	AgentConfiguration *AgentConfiguration `protobuf:"bytes,35,opt,name=agentConfiguration,proto3" json:"agentConfiguration,omitempty"`
	// encoded dns is a map of (string) ip-> list of domains (DNSEntry)
	EncodedDNS []byte `protobuf:"bytes,14,opt,name=encodedDNS,proto3" json:"encodedDNS,omitempty"`
	// All queried DNS domains for which we have collected stats
	Domains []string `protobuf:"bytes,30,rep,name=domains,proto3" json:"domains,omitempty"`
	// ////////////////
	// V2 encodings
	// all domain strings are now indexes into a single array of strings
	// hostname query information.  Encoded via V2DNSEncoder.EncodeDomainDatabase
	// is a single buffer; varint number of strings, followed by each string.
	EncodedDomainDatabase []byte `protobuf:"bytes,36,opt,name=encodedDomainDatabase,proto3" json:"encodedDomainDatabase,omitempty"`
	// new representation of encoded DNS.  This is a map of the string representation
	// of the IP --> DNSDatabaseEntry message. (was encodedDNS).  Encoded
	// via V2DNSEncoder.EncodeMapped.  Full buffer description provided there.
	EncodedDnsLookups   []byte           `protobuf:"bytes,37,opt,name=encodedDnsLookups,proto3" json:"encodedDnsLookups,omitempty"`
	ResolvedHostsByName map[string]*Host `protobuf:"bytes,40,rep,name=resolvedHostsByName,proto3" json:"resolvedHostsByName,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Post-resolution field
	EcsTask             string           `protobuf:"bytes,45,opt,name=ecsTask,proto3" json:"ecsTask,omitempty"`
}

func (x *CollectorConnections) Reset() {
	*x = CollectorConnections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorConnections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorConnections) ProtoMessage() {}

func (x *CollectorConnections) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorConnections.ProtoReflect.Descriptor instead.
func (*CollectorConnections) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{0}
}

func (x *CollectorConnections) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *CollectorConnections) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CollectorConnections) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *CollectorConnections) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CollectorConnections) GetGroupSize() int32 {
	if x != nil {
		return x.GroupSize
	}
	return 0
}

func (x *CollectorConnections) GetResolvedResources() map[string]*ResourceMetadata {
	if x != nil {
		return x.ResolvedResources
	}
	return nil
}

func (x *CollectorConnections) GetContainerForPid() map[int32]string {
	if x != nil {
		return x.ContainerForPid
	}
	return nil
}

func (x *CollectorConnections) GetEncodedTags() []byte {
	if x != nil {
		return x.EncodedTags
	}
	return nil
}

func (x *CollectorConnections) GetEncodedConnectionsTags() []byte {
	if x != nil {
		return x.EncodedConnectionsTags
	}
	return nil
}

func (x *CollectorConnections) GetContainerHostType() ContainerHostType {
	if x != nil {
		return x.ContainerHostType
	}
	return ContainerHostType_notSpecified
}

func (x *CollectorConnections) GetConnTelemetry() *CollectorConnectionsTelemetry {
	if x != nil {
		return x.ConnTelemetry
	}
	return nil
}

func (x *CollectorConnections) GetConnTelemetryMap() map[string]int64 {
	if x != nil {
		return x.ConnTelemetryMap
	}
	return nil
}

func (x *CollectorConnections) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *CollectorConnections) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *CollectorConnections) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *CollectorConnections) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *CollectorConnections) GetCompilationTelemetryByAsset() map[string]*RuntimeCompilationTelemetry {
	if x != nil {
		return x.CompilationTelemetryByAsset
	}
	return nil
}

func (x *CollectorConnections) GetKernelHeaderFetchResult() KernelHeaderFetchResult {
	if x != nil {
		return x.KernelHeaderFetchResult
	}
	return KernelHeaderFetchResult_FetchNotAttempted
}

func (x *CollectorConnections) GetCORETelemetryByAsset() map[string]COREResult {
	if x != nil {
		return x.CORETelemetryByAsset
	}
	return nil
}

func (x *CollectorConnections) GetPrebuiltEBPFAssets() []string {
	if x != nil {
		return x.PrebuiltEBPFAssets
	}
	return nil
}

func (x *CollectorConnections) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *CollectorConnections) GetRouteMetadata() []*RouteMetadata {
	if x != nil {
		return x.RouteMetadata
	}
	return nil
}

func (x *CollectorConnections) GetAgentConfiguration() *AgentConfiguration {
	if x != nil {
		return x.AgentConfiguration
	}
	return nil
}

func (x *CollectorConnections) GetEncodedDNS() []byte {
	if x != nil {
		return x.EncodedDNS
	}
	return nil
}

func (x *CollectorConnections) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *CollectorConnections) GetEncodedDomainDatabase() []byte {
	if x != nil {
		return x.EncodedDomainDatabase
	}
	return nil
}

func (x *CollectorConnections) GetEncodedDnsLookups() []byte {
	if x != nil {
		return x.EncodedDnsLookups
	}
	return nil
}

func (x *CollectorConnections) GetResolvedHostsByName() map[string]*Host {
	if x != nil {
		return x.ResolvedHostsByName
	}
	return nil
}

func (x *CollectorConnections) GetEcsTask() string {
	if x != nil {
		return x.EcsTask
	}
	return ""
}

// Connections is only used to communicate between the process agent and system-probe.
type Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conns []*Connection        `protobuf:"bytes,1,rep,name=conns,proto3" json:"conns,omitempty"`
	Dns   map[string]*DNSEntry `protobuf:"bytes,2,rep,name=dns,proto3" json:"dns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// For now, we'll keep emitting telemetry from agents < 7.35
	ConnTelemetry               *ConnectionsTelemetry                   `protobuf:"bytes,3,opt,name=connTelemetry,proto3" json:"connTelemetry,omitempty"`
	Domains                     []string                                `protobuf:"bytes,4,rep,name=domains,proto3" json:"domains,omitempty"`
	Routes                      []*Route                                `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
	CompilationTelemetryByAsset map[string]*RuntimeCompilationTelemetry `protobuf:"bytes,6,rep,name=compilationTelemetryByAsset,proto3" json:"compilationTelemetryByAsset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AgentConfiguration          *AgentConfiguration                     `protobuf:"bytes,7,opt,name=agentConfiguration,proto3" json:"agentConfiguration,omitempty"`
	Tags                        []string                                `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	ConnTelemetryMap            map[string]int64                        `protobuf:"bytes,9,rep,name=connTelemetryMap,proto3" json:"connTelemetryMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	KernelHeaderFetchResult     KernelHeaderFetchResult                 `protobuf:"varint,10,opt,name=kernelHeaderFetchResult,proto3,enum=datadog.process_agent.KernelHeaderFetchResult" json:"kernelHeaderFetchResult,omitempty"`
	CORETelemetryByAsset        map[string]COREResult                   `protobuf:"bytes,11,rep,name=CORETelemetryByAsset,proto3" json:"CORETelemetryByAsset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=datadog.process_agent.COREResult"`
	PrebuiltEBPFAssets          []string                                `protobuf:"bytes,12,rep,name=PrebuiltEBPFAssets,proto3" json:"PrebuiltEBPFAssets,omitempty"`
}

func (x *Connections) Reset() {
	*x = Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connections) ProtoMessage() {}

func (x *Connections) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connections.ProtoReflect.Descriptor instead.
func (*Connections) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{1}
}

func (x *Connections) GetConns() []*Connection {
	if x != nil {
		return x.Conns
	}
	return nil
}

func (x *Connections) GetDns() map[string]*DNSEntry {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *Connections) GetConnTelemetry() *ConnectionsTelemetry {
	if x != nil {
		return x.ConnTelemetry
	}
	return nil
}

func (x *Connections) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Connections) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Connections) GetCompilationTelemetryByAsset() map[string]*RuntimeCompilationTelemetry {
	if x != nil {
		return x.CompilationTelemetryByAsset
	}
	return nil
}

func (x *Connections) GetAgentConfiguration() *AgentConfiguration {
	if x != nil {
		return x.AgentConfiguration
	}
	return nil
}

func (x *Connections) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Connections) GetConnTelemetryMap() map[string]int64 {
	if x != nil {
		return x.ConnTelemetryMap
	}
	return nil
}

func (x *Connections) GetKernelHeaderFetchResult() KernelHeaderFetchResult {
	if x != nil {
		return x.KernelHeaderFetchResult
	}
	return KernelHeaderFetchResult_FetchNotAttempted
}

func (x *Connections) GetCORETelemetryByAsset() map[string]COREResult {
	if x != nil {
		return x.CORETelemetryByAsset
	}
	return nil
}

func (x *Connections) GetPrebuiltEBPFAssets() []string {
	if x != nil {
		return x.PrebuiltEBPFAssets
	}
	return nil
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid                  int32              `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Laddr                *Addr              `protobuf:"bytes,5,opt,name=laddr,proto3" json:"laddr,omitempty"` // Local address
	Raddr                *Addr              `protobuf:"bytes,6,opt,name=raddr,proto3" json:"raddr,omitempty"` // Remote address
	Family               ConnectionFamily   `protobuf:"varint,10,opt,name=family,proto3,enum=datadog.process_agent.ConnectionFamily" json:"family,omitempty"`
	Type                 ConnectionType     `protobuf:"varint,11,opt,name=type,proto3,enum=datadog.process_agent.ConnectionType" json:"type,omitempty"`
	IsLocalPortEphemeral EphemeralPortState `protobuf:"varint,41,opt,name=isLocalPortEphemeral,proto3,enum=datadog.process_agent.EphemeralPortState" json:"isLocalPortEphemeral,omitempty"`
	// Relative counters since last check
	LastBytesSent       uint64              `protobuf:"varint,16,opt,name=lastBytesSent,proto3" json:"lastBytesSent,omitempty"`
	LastBytesReceived   uint64              `protobuf:"varint,17,opt,name=lastBytesReceived,proto3" json:"lastBytesReceived,omitempty"`
	LastRetransmits     uint32              `protobuf:"varint,18,opt,name=lastRetransmits,proto3" json:"lastRetransmits,omitempty"`
	Direction           ConnectionDirection `protobuf:"varint,19,opt,name=direction,proto3,enum=datadog.process_agent.ConnectionDirection" json:"direction,omitempty"`
	LastPacketsSent     uint64              `protobuf:"varint,38,opt,name=lastPacketsSent,proto3" json:"lastPacketsSent,omitempty"`
	LastPacketsReceived uint64              `protobuf:"varint,39,opt,name=lastPacketsReceived,proto3" json:"lastPacketsReceived,omitempty"`
	Protocol            *ProtocolStack      `protobuf:"bytes,48,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Network namespace
	NetNS uint32 `protobuf:"varint,20,opt,name=netNS,proto3" json:"netNS,omitempty"`
	// NetworkID of the remote address (post-resolution field)
	RemoteNetworkId string `protobuf:"bytes,32,opt,name=remoteNetworkId,proto3" json:"remoteNetworkId,omitempty"`
	// the conntrack entry associated with the connection. May be null on systems which don't support querying conntrack.
	IpTranslation *IPTranslation `protobuf:"bytes,21,opt,name=ipTranslation,proto3" json:"ipTranslation,omitempty"`
	// TCP-specific metrics
	Rtt    uint32 `protobuf:"varint,22,opt,name=rtt,proto3" json:"rtt,omitempty"`
	RttVar uint32 `protobuf:"varint,23,opt,name=rttVar,proto3" json:"rttVar,omitempty"`
	// Indicates that this connection begins and ends on the same host
	IntraHost bool `protobuf:"varint,24,opt,name=intraHost,proto3" json:"intraHost,omitempty"`
	// DNS-specific metrics
	DnsSuccessfulResponses uint32            `protobuf:"varint,25,opt,name=dnsSuccessfulResponses,proto3" json:"dnsSuccessfulResponses,omitempty"`
	DnsFailedResponses     uint32            `protobuf:"varint,26,opt,name=dnsFailedResponses,proto3" json:"dnsFailedResponses,omitempty"`
	DnsTimeouts            uint32            `protobuf:"varint,27,opt,name=dnsTimeouts,proto3" json:"dnsTimeouts,omitempty"`
	DnsSuccessLatencySum   uint64            `protobuf:"varint,28,opt,name=dnsSuccessLatencySum,proto3" json:"dnsSuccessLatencySum,omitempty"`
	DnsFailureLatencySum   uint64            `protobuf:"varint,29,opt,name=dnsFailureLatencySum,proto3" json:"dnsFailureLatencySum,omitempty"`
	DnsCountByRcode        map[uint32]uint32 `protobuf:"bytes,33,rep,name=dnsCountByRcode,proto3" json:"dnsCountByRcode,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// TCP state transition counters relative to last check
	LastTcpEstablished uint32 `protobuf:"varint,30,opt,name=lastTcpEstablished,proto3" json:"lastTcpEstablished,omitempty"`
	LastTcpClosed      uint32 `protobuf:"varint,31,opt,name=lastTcpClosed,proto3" json:"lastTcpClosed,omitempty"`
	// dns stats based on domain queried, the key corresponds to an index into the `domains` field
	// dnsStatsByDomain is deprecated field, left in for handling old agent versions
	DnsStatsByDomain map[int32]*DNSStats `protobuf:"bytes,34,rep,name=dnsStatsByDomain,proto3" json:"dnsStatsByDomain,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// dnsStatsByDomainByQueryType is new field
	DnsStatsByDomainByQueryType map[int32]*DNSStatsByQueryType `protobuf:"bytes,42,rep,name=dnsStatsByDomainByQueryType,proto3" json:"dnsStatsByDomainByQueryType,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// int32 index into map is the offset into the CollectorConnections.encodedDomainDatabase
	DnsStatsByDomainOffsetByQueryType map[int32]*DNSStatsByQueryType `protobuf:"bytes,43,rep,name=dnsStatsByDomainOffsetByQueryType,proto3" json:"dnsStatsByDomainOffsetByQueryType,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// routeIdx is the index of the route used to exit the host that this connection was collected from. It is an index into
	// the CollectorConnections#routes field.
	RouteIdx int32 `protobuf:"varint,36,opt,name=routeIdx,proto3" json:"routeIdx,omitempty"`
	// the index of the resolved target of the route (post-resolution field)
	RouteTargetIdx int32 `protobuf:"varint,40,opt,name=routeTargetIdx,proto3" json:"routeTargetIdx,omitempty"`
	// serialized HTTPAggregations object summarizing all http transactions recorded for this connection, organized by request path
	HttpAggregations []byte `protobuf:"bytes,37,opt,name=httpAggregations,proto3" json:"httpAggregations,omitempty"`
	// The stored values corresponds to an index into the `Connections.tags` field
	Tags []uint32 `protobuf:"varint,44,rep,name=tags,proto3" json:"tags,omitempty"`
	// Pointer to tags for this connection, see CollectorConnections#encodedConnectionsTags.
	TagsIdx int32 `protobuf:"varint,45,opt,name=tagsIdx,proto3" json:"tagsIdx,omitempty"`
	// a checksum of all the tags in this connection. Populated by the agent, but used by the backend to know when tags have changed for a connection.
	TagsChecksum uint32 `protobuf:"varint,47,opt,name=tagsChecksum,proto3" json:"tagsChecksum,omitempty"`
	// Used for offset state management (backend)
	StateIndex uint32 `protobuf:"varint,46,opt,name=stateIndex,proto3" json:"stateIndex,omitempty"`
	// serialized DataStreamsAggregations object summarizing all data streams transactions (Kafka produce & Kafka fetch) recorded for this connection organized by topic
	DataStreamsAggregations []byte `protobuf:"bytes,49,opt,name=dataStreamsAggregations,proto3" json:"dataStreamsAggregations,omitempty"`
	// serialized HTTP2Aggregations object summarizing all http2 transactions recorded for this connection, organized by request path
	Http2Aggregations []byte `protobuf:"bytes,50,opt,name=http2Aggregations,proto3" json:"http2Aggregations,omitempty"`
	// serialized DatabaseAggregations object summarizing all database transactions recorded for this connection.
	DatabaseAggregations []byte `protobuf:"bytes,51,opt,name=databaseAggregations,proto3" json:"databaseAggregations,omitempty"`
	// serialized map of POSIX error codes to the number of times they have been encountered in the context of this connection (ex [110: 3] would mean that the connection has seen 3 ETIMEDOUT errors)
	TcpFailuresByErrCode map[uint32]uint32 `protobuf:"bytes,52,rep,name=tcpFailuresByErrCode,proto3" json:"tcpFailuresByErrCode,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RemoteEcsTask        string            `protobuf:"bytes,53,opt,name=remoteEcsTask,proto3" json:"remoteEcsTask,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Connection) GetLaddr() *Addr {
	if x != nil {
		return x.Laddr
	}
	return nil
}

func (x *Connection) GetRaddr() *Addr {
	if x != nil {
		return x.Raddr
	}
	return nil
}

func (x *Connection) GetFamily() ConnectionFamily {
	if x != nil {
		return x.Family
	}
	return ConnectionFamily_v4
}

func (x *Connection) GetType() ConnectionType {
	if x != nil {
		return x.Type
	}
	return ConnectionType_tcp
}

func (x *Connection) GetIsLocalPortEphemeral() EphemeralPortState {
	if x != nil {
		return x.IsLocalPortEphemeral
	}
	return EphemeralPortState_ephemeralUnspecified
}

func (x *Connection) GetLastBytesSent() uint64 {
	if x != nil {
		return x.LastBytesSent
	}
	return 0
}

func (x *Connection) GetLastBytesReceived() uint64 {
	if x != nil {
		return x.LastBytesReceived
	}
	return 0
}

func (x *Connection) GetLastRetransmits() uint32 {
	if x != nil {
		return x.LastRetransmits
	}
	return 0
}

func (x *Connection) GetDirection() ConnectionDirection {
	if x != nil {
		return x.Direction
	}
	return ConnectionDirection_unspecified
}

func (x *Connection) GetLastPacketsSent() uint64 {
	if x != nil {
		return x.LastPacketsSent
	}
	return 0
}

func (x *Connection) GetLastPacketsReceived() uint64 {
	if x != nil {
		return x.LastPacketsReceived
	}
	return 0
}

func (x *Connection) GetProtocol() *ProtocolStack {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Connection) GetNetNS() uint32 {
	if x != nil {
		return x.NetNS
	}
	return 0
}

func (x *Connection) GetRemoteNetworkId() string {
	if x != nil {
		return x.RemoteNetworkId
	}
	return ""
}

func (x *Connection) GetIpTranslation() *IPTranslation {
	if x != nil {
		return x.IpTranslation
	}
	return nil
}

func (x *Connection) GetRtt() uint32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *Connection) GetRttVar() uint32 {
	if x != nil {
		return x.RttVar
	}
	return 0
}

func (x *Connection) GetIntraHost() bool {
	if x != nil {
		return x.IntraHost
	}
	return false
}

func (x *Connection) GetDnsSuccessfulResponses() uint32 {
	if x != nil {
		return x.DnsSuccessfulResponses
	}
	return 0
}

func (x *Connection) GetDnsFailedResponses() uint32 {
	if x != nil {
		return x.DnsFailedResponses
	}
	return 0
}

func (x *Connection) GetDnsTimeouts() uint32 {
	if x != nil {
		return x.DnsTimeouts
	}
	return 0
}

func (x *Connection) GetDnsSuccessLatencySum() uint64 {
	if x != nil {
		return x.DnsSuccessLatencySum
	}
	return 0
}

func (x *Connection) GetDnsFailureLatencySum() uint64 {
	if x != nil {
		return x.DnsFailureLatencySum
	}
	return 0
}

func (x *Connection) GetDnsCountByRcode() map[uint32]uint32 {
	if x != nil {
		return x.DnsCountByRcode
	}
	return nil
}

func (x *Connection) GetLastTcpEstablished() uint32 {
	if x != nil {
		return x.LastTcpEstablished
	}
	return 0
}

func (x *Connection) GetLastTcpClosed() uint32 {
	if x != nil {
		return x.LastTcpClosed
	}
	return 0
}

func (x *Connection) GetDnsStatsByDomain() map[int32]*DNSStats {
	if x != nil {
		return x.DnsStatsByDomain
	}
	return nil
}

func (x *Connection) GetDnsStatsByDomainByQueryType() map[int32]*DNSStatsByQueryType {
	if x != nil {
		return x.DnsStatsByDomainByQueryType
	}
	return nil
}

func (x *Connection) GetDnsStatsByDomainOffsetByQueryType() map[int32]*DNSStatsByQueryType {
	if x != nil {
		return x.DnsStatsByDomainOffsetByQueryType
	}
	return nil
}

func (x *Connection) GetRouteIdx() int32 {
	if x != nil {
		return x.RouteIdx
	}
	return 0
}

func (x *Connection) GetRouteTargetIdx() int32 {
	if x != nil {
		return x.RouteTargetIdx
	}
	return 0
}

func (x *Connection) GetHttpAggregations() []byte {
	if x != nil {
		return x.HttpAggregations
	}
	return nil
}

func (x *Connection) GetTags() []uint32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Connection) GetTagsIdx() int32 {
	if x != nil {
		return x.TagsIdx
	}
	return 0
}

func (x *Connection) GetTagsChecksum() uint32 {
	if x != nil {
		return x.TagsChecksum
	}
	return 0
}

func (x *Connection) GetStateIndex() uint32 {
	if x != nil {
		return x.StateIndex
	}
	return 0
}

func (x *Connection) GetDataStreamsAggregations() []byte {
	if x != nil {
		return x.DataStreamsAggregations
	}
	return nil
}

func (x *Connection) GetHttp2Aggregations() []byte {
	if x != nil {
		return x.Http2Aggregations
	}
	return nil
}

func (x *Connection) GetDatabaseAggregations() []byte {
	if x != nil {
		return x.DatabaseAggregations
	}
	return nil
}

func (x *Connection) GetTcpFailuresByErrCode() map[uint32]uint32 {
	if x != nil {
		return x.TcpFailuresByErrCode
	}
	return nil
}

func (x *Connection) GetRemoteEcsTask() string {
	if x != nil {
		return x.RemoteEcsTask
	}
	return ""
}

// ResourceMetadata only holds enough information to identify a resource in connection data
type ResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ByteKey []byte `protobuf:"bytes,3,opt,name=byteKey,proto3" json:"byteKey,omitempty"`
	// backend use only, associates tags with a given ResourceMetadata.
	// when this type is serialized, always use tagIndex to point to an entry
	// in encodedTags.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// points to an index in CollectorConnections#encodedTags. Use the helpers defined in process/connections.go to access
	// the tags associated with this resource metadata.
	// `CollectorConnections#GetTags`, `CollectorConnections#UnsafeIterateTags',
	// `CollectorConnections#IterateResourceTags`, `CollectorConnections#GetResourceTags`
	TagIndex int32 `protobuf:"varint,5,opt,name=tagIndex,proto3" json:"tagIndex,omitempty"`
	// if set this is a unix timestamp of the last time the tags for a given resource changed.
	// if tags have been decoded for a given (byteKey, tagsModified) tuple, that set of tags will not change.
	TagsModified int64 `protobuf:"varint,6,opt,name=tagsModified,proto3" json:"tagsModified,omitempty"`
}

func (x *ResourceMetadata) Reset() {
	*x = ResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceMetadata) ProtoMessage() {}

func (x *ResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceMetadata.ProtoReflect.Descriptor instead.
func (*ResourceMetadata) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceMetadata) GetByteKey() []byte {
	if x != nil {
		return x.ByteKey
	}
	return nil
}

func (x *ResourceMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ResourceMetadata) GetTagIndex() int32 {
	if x != nil {
		return x.TagIndex
	}
	return 0
}

func (x *ResourceMetadata) GetTagsModified() int64 {
	if x != nil {
		return x.TagsModified
	}
	return 0
}

type ConnectionsTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonotonicKprobesTriggered          int64 `protobuf:"varint,1,opt,name=monotonicKprobesTriggered,proto3" json:"monotonicKprobesTriggered,omitempty"`
	MonotonicKprobesMissed             int64 `protobuf:"varint,2,opt,name=monotonicKprobesMissed,proto3" json:"monotonicKprobesMissed,omitempty"`
	MonotonicConntrackRegisters        int64 `protobuf:"varint,3,opt,name=monotonicConntrackRegisters,proto3" json:"monotonicConntrackRegisters,omitempty"`
	MonotonicConntrackRegistersDropped int64 `protobuf:"varint,4,opt,name=monotonicConntrackRegistersDropped,proto3" json:"monotonicConntrackRegistersDropped,omitempty"`
	MonotonicDnsPacketsProcessed       int64 `protobuf:"varint,5,opt,name=monotonicDnsPacketsProcessed,proto3" json:"monotonicDnsPacketsProcessed,omitempty"`
	MonotonicConnsClosed               int64 `protobuf:"varint,6,opt,name=monotonicConnsClosed,proto3" json:"monotonicConnsClosed,omitempty"`
	ConnsBpfMapSize                    int64 `protobuf:"varint,7,opt,name=connsBpfMapSize,proto3" json:"connsBpfMapSize,omitempty"`
	MonotonicUdpSendsProcessed         int64 `protobuf:"varint,8,opt,name=monotonicUdpSendsProcessed,proto3" json:"monotonicUdpSendsProcessed,omitempty"`
	MonotonicUdpSendsMissed            int64 `protobuf:"varint,9,opt,name=monotonicUdpSendsMissed,proto3" json:"monotonicUdpSendsMissed,omitempty"`
	ConntrackSamplingPercent           int64 `protobuf:"varint,10,opt,name=conntrackSamplingPercent,proto3" json:"conntrackSamplingPercent,omitempty"`
	DnsStatsDropped                    int64 `protobuf:"varint,11,opt,name=dnsStatsDropped,proto3" json:"dnsStatsDropped,omitempty"`
}

func (x *ConnectionsTelemetry) Reset() {
	*x = ConnectionsTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionsTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionsTelemetry) ProtoMessage() {}

func (x *ConnectionsTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionsTelemetry.ProtoReflect.Descriptor instead.
func (*ConnectionsTelemetry) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectionsTelemetry) GetMonotonicKprobesTriggered() int64 {
	if x != nil {
		return x.MonotonicKprobesTriggered
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicKprobesMissed() int64 {
	if x != nil {
		return x.MonotonicKprobesMissed
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicConntrackRegisters() int64 {
	if x != nil {
		return x.MonotonicConntrackRegisters
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicConntrackRegistersDropped() int64 {
	if x != nil {
		return x.MonotonicConntrackRegistersDropped
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicDnsPacketsProcessed() int64 {
	if x != nil {
		return x.MonotonicDnsPacketsProcessed
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicConnsClosed() int64 {
	if x != nil {
		return x.MonotonicConnsClosed
	}
	return 0
}

func (x *ConnectionsTelemetry) GetConnsBpfMapSize() int64 {
	if x != nil {
		return x.ConnsBpfMapSize
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicUdpSendsProcessed() int64 {
	if x != nil {
		return x.MonotonicUdpSendsProcessed
	}
	return 0
}

func (x *ConnectionsTelemetry) GetMonotonicUdpSendsMissed() int64 {
	if x != nil {
		return x.MonotonicUdpSendsMissed
	}
	return 0
}

func (x *ConnectionsTelemetry) GetConntrackSamplingPercent() int64 {
	if x != nil {
		return x.ConntrackSamplingPercent
	}
	return 0
}

func (x *ConnectionsTelemetry) GetDnsStatsDropped() int64 {
	if x != nil {
		return x.DnsStatsDropped
	}
	return 0
}

type CollectorConnectionsTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KprobesTriggered          int64 `protobuf:"varint,1,opt,name=kprobesTriggered,proto3" json:"kprobesTriggered,omitempty"`
	KprobesMissed             int64 `protobuf:"varint,2,opt,name=kprobesMissed,proto3" json:"kprobesMissed,omitempty"`
	ConntrackRegisters        int64 `protobuf:"varint,3,opt,name=conntrackRegisters,proto3" json:"conntrackRegisters,omitempty"`
	ConntrackRegistersDropped int64 `protobuf:"varint,4,opt,name=conntrackRegistersDropped,proto3" json:"conntrackRegistersDropped,omitempty"`
	DnsPacketsProcessed       int64 `protobuf:"varint,5,opt,name=dnsPacketsProcessed,proto3" json:"dnsPacketsProcessed,omitempty"`
	ConnsClosed               int64 `protobuf:"varint,6,opt,name=connsClosed,proto3" json:"connsClosed,omitempty"`
	ConnsBpfMapSize           int64 `protobuf:"varint,7,opt,name=connsBpfMapSize,proto3" json:"connsBpfMapSize,omitempty"`
	UdpSendsProcessed         int64 `protobuf:"varint,8,opt,name=udpSendsProcessed,proto3" json:"udpSendsProcessed,omitempty"`
	UdpSendsMissed            int64 `protobuf:"varint,9,opt,name=udpSendsMissed,proto3" json:"udpSendsMissed,omitempty"`
	ConntrackSamplingPercent  int64 `protobuf:"varint,10,opt,name=conntrackSamplingPercent,proto3" json:"conntrackSamplingPercent,omitempty"`
	DnsStatsDropped           int64 `protobuf:"varint,11,opt,name=dnsStatsDropped,proto3" json:"dnsStatsDropped,omitempty"`
}

func (x *CollectorConnectionsTelemetry) Reset() {
	*x = CollectorConnectionsTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorConnectionsTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorConnectionsTelemetry) ProtoMessage() {}

func (x *CollectorConnectionsTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorConnectionsTelemetry.ProtoReflect.Descriptor instead.
func (*CollectorConnectionsTelemetry) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{5}
}

func (x *CollectorConnectionsTelemetry) GetKprobesTriggered() int64 {
	if x != nil {
		return x.KprobesTriggered
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetKprobesMissed() int64 {
	if x != nil {
		return x.KprobesMissed
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetConntrackRegisters() int64 {
	if x != nil {
		return x.ConntrackRegisters
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetConntrackRegistersDropped() int64 {
	if x != nil {
		return x.ConntrackRegistersDropped
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetDnsPacketsProcessed() int64 {
	if x != nil {
		return x.DnsPacketsProcessed
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetConnsClosed() int64 {
	if x != nil {
		return x.ConnsClosed
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetConnsBpfMapSize() int64 {
	if x != nil {
		return x.ConnsBpfMapSize
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetUdpSendsProcessed() int64 {
	if x != nil {
		return x.UdpSendsProcessed
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetUdpSendsMissed() int64 {
	if x != nil {
		return x.UdpSendsMissed
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetConntrackSamplingPercent() int64 {
	if x != nil {
		return x.ConntrackSamplingPercent
	}
	return 0
}

func (x *CollectorConnectionsTelemetry) GetDnsStatsDropped() int64 {
	if x != nil {
		return x.DnsStatsDropped
	}
	return 0
}

type RuntimeCompilationTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeCompilationEnabled  bool                     `protobuf:"varint,1,opt,name=runtimeCompilationEnabled,proto3" json:"runtimeCompilationEnabled,omitempty"`
	RuntimeCompilationResult   RuntimeCompilationResult `protobuf:"varint,2,opt,name=runtimeCompilationResult,proto3,enum=datadog.process_agent.RuntimeCompilationResult" json:"runtimeCompilationResult,omitempty"`
	RuntimeCompilationDuration int64                    `protobuf:"varint,3,opt,name=runtimeCompilationDuration,proto3" json:"runtimeCompilationDuration,omitempty"`
	// Field below was deprecated in agent 7.41
	KernelHeaderFetchResult KernelHeaderFetchResult `protobuf:"varint,4,opt,name=kernelHeaderFetchResult,proto3,enum=datadog.process_agent.KernelHeaderFetchResult" json:"kernelHeaderFetchResult,omitempty"`
}

func (x *RuntimeCompilationTelemetry) Reset() {
	*x = RuntimeCompilationTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuntimeCompilationTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeCompilationTelemetry) ProtoMessage() {}

func (x *RuntimeCompilationTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeCompilationTelemetry.ProtoReflect.Descriptor instead.
func (*RuntimeCompilationTelemetry) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{6}
}

func (x *RuntimeCompilationTelemetry) GetRuntimeCompilationEnabled() bool {
	if x != nil {
		return x.RuntimeCompilationEnabled
	}
	return false
}

func (x *RuntimeCompilationTelemetry) GetRuntimeCompilationResult() RuntimeCompilationResult {
	if x != nil {
		return x.RuntimeCompilationResult
	}
	return RuntimeCompilationResult_NotAttempted
}

func (x *RuntimeCompilationTelemetry) GetRuntimeCompilationDuration() int64 {
	if x != nil {
		return x.RuntimeCompilationDuration
	}
	return 0
}

func (x *RuntimeCompilationTelemetry) GetKernelHeaderFetchResult() KernelHeaderFetchResult {
	if x != nil {
		return x.KernelHeaderFetchResult
	}
	return KernelHeaderFetchResult_FetchNotAttempted
}

type AgentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NpmEnabled bool `protobuf:"varint,1,opt,name=npmEnabled,proto3" json:"npmEnabled,omitempty"`
	UsmEnabled bool `protobuf:"varint,2,opt,name=usmEnabled,proto3" json:"usmEnabled,omitempty"`
	DsmEnabled bool `protobuf:"varint,3,opt,name=dsmEnabled,proto3" json:"dsmEnabled,omitempty"`
	CcmEnabled bool `protobuf:"varint,4,opt,name=ccmEnabled,proto3" json:"ccmEnabled,omitempty"`
	CsmEnabled bool `protobuf:"varint,5,opt,name=csmEnabled,proto3" json:"csmEnabled,omitempty"`
}

func (x *AgentConfiguration) Reset() {
	*x = AgentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfiguration) ProtoMessage() {}

func (x *AgentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfiguration.ProtoReflect.Descriptor instead.
func (*AgentConfiguration) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{7}
}

func (x *AgentConfiguration) GetNpmEnabled() bool {
	if x != nil {
		return x.NpmEnabled
	}
	return false
}

func (x *AgentConfiguration) GetUsmEnabled() bool {
	if x != nil {
		return x.UsmEnabled
	}
	return false
}

func (x *AgentConfiguration) GetDsmEnabled() bool {
	if x != nil {
		return x.DsmEnabled
	}
	return false
}

func (x *AgentConfiguration) GetCcmEnabled() bool {
	if x != nil {
		return x.CcmEnabled
	}
	return false
}

func (x *AgentConfiguration) GetCsmEnabled() bool {
	if x != nil {
		return x.CsmEnabled
	}
	return false
}

// Route refers to a route out of a host (think `ip route get`).
// this is used primarily in AWS where we discover the subnet a
// that a connection was associated with
type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{8}
}

func (x *Route) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{9}
}

func (x *Subnet) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

// RouteMetadata
type RouteMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// the tags for the inferred route target (see Connection#routeTargetIdx)
	// whenever this type is encoded on the wire, use tagsIndex and tagsModified -- not tags.
	TagIndex     int32    `protobuf:"varint,2,opt,name=tagIndex,proto3" json:"tagIndex,omitempty"`
	TagsModified int64    `protobuf:"varint,3,opt,name=tagsModified,proto3" json:"tagsModified,omitempty"`
	Tags         []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"` // Used only on the backend
}

func (x *RouteMetadata) Reset() {
	*x = RouteMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMetadata) ProtoMessage() {}

func (x *RouteMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMetadata.ProtoReflect.Descriptor instead.
func (*RouteMetadata) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{10}
}

func (x *RouteMetadata) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *RouteMetadata) GetTagIndex() int32 {
	if x != nil {
		return x.TagIndex
	}
	return 0
}

func (x *RouteMetadata) GetTagsModified() int64 {
	if x != nil {
		return x.TagsModified
	}
	return 0
}

func (x *RouteMetadata) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type IPTranslation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplSrcIP   string `protobuf:"bytes,1,opt,name=replSrcIP,proto3" json:"replSrcIP,omitempty"`
	ReplDstIP   string `protobuf:"bytes,2,opt,name=replDstIP,proto3" json:"replDstIP,omitempty"`
	ReplSrcPort int32  `protobuf:"varint,3,opt,name=replSrcPort,proto3" json:"replSrcPort,omitempty"`
	ReplDstPort int32  `protobuf:"varint,4,opt,name=replDstPort,proto3" json:"replDstPort,omitempty"`
}

func (x *IPTranslation) Reset() {
	*x = IPTranslation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPTranslation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPTranslation) ProtoMessage() {}

func (x *IPTranslation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPTranslation.ProtoReflect.Descriptor instead.
func (*IPTranslation) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{11}
}

func (x *IPTranslation) GetReplSrcIP() string {
	if x != nil {
		return x.ReplSrcIP
	}
	return ""
}

func (x *IPTranslation) GetReplDstIP() string {
	if x != nil {
		return x.ReplDstIP
	}
	return ""
}

func (x *IPTranslation) GetReplSrcPort() int32 {
	if x != nil {
		return x.ReplSrcPort
	}
	return 0
}

func (x *IPTranslation) GetReplDstPort() int32 {
	if x != nil {
		return x.ReplDstPort
	}
	return 0
}

type Addr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// the containerID associated with the addr. This value can be used to look up a value in
	// CollectorConnections#resolvedResources.
	//
	// Despite the name, this can be either a containerID or a cloud loadbalancer.
	//
	// this will usually be added during resolution, but if the container is on the same host
	// where the connection was collected this will be set by the agent
	ContainerId string `protobuf:"bytes,5,opt,name=containerId,proto3" json:"containerId,omitempty"`
	// the host associated with the addr. This value can be used to look up a value in
	// CollectorConnections#resolvedHostsByName.
	HostName string `protobuf:"bytes,7,opt,name=hostName,proto3" json:"hostName,omitempty"` // post-resolution field
}

func (x *Addr) Reset() {
	*x = Addr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Addr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Addr) ProtoMessage() {}

func (x *Addr) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Addr.ProtoReflect.Descriptor instead.
func (*Addr) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{12}
}

func (x *Addr) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Addr) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Addr) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *Addr) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

type ProtocolStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack []ProtocolType `protobuf:"varint,1,rep,name=stack,proto3,enum=datadog.process_agent.ProtocolType" json:"stack,omitempty"`
}

func (x *ProtocolStack) Reset() {
	*x = ProtocolStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolStack) ProtoMessage() {}

func (x *ProtocolStack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolStack.ProtoReflect.Descriptor instead.
func (*ProtocolStack) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{13}
}

func (x *ProtocolStack) GetStack() []ProtocolType {
	if x != nil {
		return x.Stack
	}
	return nil
}

type DNSEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *DNSEntry) Reset() {
	*x = DNSEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSEntry) ProtoMessage() {}

func (x *DNSEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSEntry.ProtoReflect.Descriptor instead.
func (*DNSEntry) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{14}
}

func (x *DNSEntry) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type DNSStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsTimeouts          uint32            `protobuf:"varint,1,opt,name=dnsTimeouts,proto3" json:"dnsTimeouts,omitempty"`
	DnsSuccessLatencySum uint64            `protobuf:"varint,2,opt,name=dnsSuccessLatencySum,proto3" json:"dnsSuccessLatencySum,omitempty"`
	DnsFailureLatencySum uint64            `protobuf:"varint,3,opt,name=dnsFailureLatencySum,proto3" json:"dnsFailureLatencySum,omitempty"`
	DnsCountByRcode      map[uint32]uint32 `protobuf:"bytes,4,rep,name=dnsCountByRcode,proto3" json:"dnsCountByRcode,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DNSStats) Reset() {
	*x = DNSStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSStats) ProtoMessage() {}

func (x *DNSStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSStats.ProtoReflect.Descriptor instead.
func (*DNSStats) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{15}
}

func (x *DNSStats) GetDnsTimeouts() uint32 {
	if x != nil {
		return x.DnsTimeouts
	}
	return 0
}

func (x *DNSStats) GetDnsSuccessLatencySum() uint64 {
	if x != nil {
		return x.DnsSuccessLatencySum
	}
	return 0
}

func (x *DNSStats) GetDnsFailureLatencySum() uint64 {
	if x != nil {
		return x.DnsFailureLatencySum
	}
	return 0
}

func (x *DNSStats) GetDnsCountByRcode() map[uint32]uint32 {
	if x != nil {
		return x.DnsCountByRcode
	}
	return nil
}

type DNSStatsByQueryType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DnsStatsByQueryType map[int32]*DNSStats `protobuf:"bytes,1,rep,name=dnsStatsByQueryType,proto3" json:"dnsStatsByQueryType,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DNSStatsByQueryType) Reset() {
	*x = DNSStatsByQueryType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_process_connections_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DNSStatsByQueryType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNSStatsByQueryType) ProtoMessage() {}

func (x *DNSStatsByQueryType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_process_connections_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNSStatsByQueryType.ProtoReflect.Descriptor instead.
func (*DNSStatsByQueryType) Descriptor() ([]byte, []int) {
	return file_proto_process_connections_proto_rawDescGZIP(), []int{16}
}

func (x *DNSStatsByQueryType) GetDnsStatsByQueryType() map[int32]*DNSStats {
	if x != nil {
		return x.DnsStatsByQueryType
	}
	return nil
}

var File_proto_process_connections_proto protoreflect.FileDescriptor

var file_proto_process_connections_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x13, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x50, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x50, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x6d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x4d, 0x61, 0x70, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x8e,
	0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x68, 0x0a, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x79, 0x0a, 0x14, 0x43, 0x4f, 0x52,
	0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x4f, 0x52, 0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14,
	0x43, 0x4f, 0x52, 0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x45, 0x42, 0x50, 0x46, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x50, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x45, 0x42, 0x50, 0x46, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x4e, 0x53, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x4e,
	0x53, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12,
	0x76, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74,
	0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x63, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x63, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x1a, 0x6d, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72,
	0x50, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x82, 0x01, 0x0a, 0x20, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a,
	0x0a, 0x19, 0x43, 0x4f, 0x52, 0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x4f, 0x52, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x18, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08,
	0x20, 0x10, 0x21, 0x4a, 0x04, 0x08, 0x21, 0x10, 0x22, 0x22, 0xa0, 0x0a, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6f, 0x6e,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x6e,
	0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x64, 0x6e,
	0x73, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x1b, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x59, 0x0a, 0x12,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61,
	0x70, 0x12, 0x68, 0x0a, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a, 0x14, 0x43,
	0x4f, 0x52, 0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x4f,
	0x52, 0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x43, 0x4f, 0x52, 0x45, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x45, 0x42, 0x50, 0x46, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x50, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x45, 0x42, 0x50, 0x46, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x57, 0x0a,
	0x08, 0x44, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x82, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x42,
	0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x43,
	0x6f, 0x6e, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x6a, 0x0a, 0x19, 0x43, 0x4f, 0x52, 0x45, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x42, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x4f, 0x52, 0x45, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x16, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x31, 0x0a,
	0x05, 0x6c, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x6c, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x31, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x52, 0x05, 0x72, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x4e, 0x53, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x4e, 0x53, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72,
	0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x74, 0x74, 0x56, 0x61, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x74, 0x74, 0x56, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x72, 0x61, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x72, 0x61, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x64, 0x6e, 0x73, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x64, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x6e,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x6e, 0x73, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x60, 0x0a, 0x0f, 0x64, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x52, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x63, 0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x63,
	0x70, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x12, 0x63, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x64, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x1b, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x96,
	0x01, 0x0a, 0x21, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x21, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x68,
	0x74, 0x74, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x2c, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x00, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x73, 0x49, 0x64, 0x78, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x61, 0x67, 0x73, 0x49, 0x64, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x67,
	0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x61, 0x67, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a,
	0x17, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x74, 0x74, 0x70, 0x32,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x11, 0x68, 0x74, 0x74, 0x70, 0x32, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x14, 0x74, 0x63, 0x70,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x79, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x70, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x79, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x74, 0x63, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x42, 0x79, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x45, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x1a, 0x42, 0x0a, 0x14, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x63,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x15, 0x44, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x20, 0x44, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x80, 0x01, 0x0a, 0x26, 0x44, 0x6e, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x54, 0x63, 0x70,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x42, 0x79, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0d,
	0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04,
	0x08, 0x23, 0x10, 0x24, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x79, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xa0, 0x05,
	0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f,
	0x6e, 0x69, 0x63, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x6d, 0x6f, 0x6e, 0x6f, 0x74,
	0x6f, 0x6e, 0x69, 0x63, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69,
	0x63, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x4b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b,
	0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1b, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e,
	0x0a, 0x22, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x6d, 0x6f, 0x6e, 0x6f,
	0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x42,
	0x0a, 0x1c, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x44, 0x6e, 0x73, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x44,
	0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x6e, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x73,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x42,
	0x70, 0x66, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x42, 0x70, 0x66, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x3e, 0x0a, 0x1a, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x64, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55,
	0x64, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x64, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x64, 0x70, 0x53,
	0x65, 0x6e, 0x64, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x6f,
	0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x22, 0x99, 0x04, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x6b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x4d, 0x69,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x64, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x73,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x42,
	0x70, 0x66, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x42, 0x70, 0x66, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x75, 0x64, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x64, 0x70,
	0x53, 0x65, 0x6e, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x75, 0x64, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x73, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x64, 0x70, 0x53, 0x65, 0x6e, 0x64, 0x73,
	0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x6e, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x22, 0xf2, 0x02, 0x0a,
	0x1b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x19,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x18, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x18, 0x72,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x72, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x70, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x70,
	0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x73,
	0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x63, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x63,
	0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x73, 0x6d, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x73,
	0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x79, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x74, 0x61, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x61, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x49, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x53, 0x72, 0x63,
	0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x53, 0x72,
	0x63, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x44, 0x73, 0x74, 0x49, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x44, 0x73, 0x74, 0x49,
	0x50, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x53, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x44, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x7a, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x22, 0x4e, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x22, 0x20, 0x0a, 0x08, 0x44, 0x4e, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xb8, 0x02, 0x0a, 0x08, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x64, 0x6e, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x6e, 0x73, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x64, 0x6e, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x75, 0x6d, 0x12, 0x5e, 0x0a, 0x0f, 0x64, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x44, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52,
	0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x6e, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x42, 0x0a, 0x14, 0x44, 0x6e,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5,
	0x01, 0x0a, 0x13, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x67, 0x0a,
	0x18, 0x44, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x92, 0x02, 0x0a, 0x18, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x45, 0x72, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x45, 0x72, 0x72, 0x10, 0x09, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x0b, 0x2a, 0xa9, 0x02, 0x0a, 0x17,
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4e, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x66, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x44, 0x69, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x0a, 0x2a, 0x9a, 0x01, 0x0a, 0x0a, 0x43, 0x4f, 0x52, 0x45,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x54, 0x46, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x42,
	0x54, 0x46, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x54, 0x46, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x74, 0x66, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x06, 0x2a, 0x22, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x06, 0x0a, 0x02, 0x76, 0x34, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x76, 0x36, 0x10, 0x01, 0x2a, 0x57, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10,
	0x04, 0x2a, 0x55, 0x0a, 0x12, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x65, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x72,
	0x75, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x10, 0x02, 0x2a, 0xf9, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x54, 0x54, 0x50, 0x32, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e,
	0x67, 0x6f, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x41, 0x4d, 0x51, 0x50, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x79, 0x53, 0x51, 0x4c,
	0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x47, 0x52,
	0x50, 0x43, 0x10, 0x0b, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x76, 0x35, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_process_connections_proto_rawDescOnce sync.Once
	file_proto_process_connections_proto_rawDescData = file_proto_process_connections_proto_rawDesc
)

func file_proto_process_connections_proto_rawDescGZIP() []byte {
	file_proto_process_connections_proto_rawDescOnce.Do(func() {
		file_proto_process_connections_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_process_connections_proto_rawDescData)
	})
	return file_proto_process_connections_proto_rawDescData
}

var file_proto_process_connections_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_process_connections_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_proto_process_connections_proto_goTypes = []interface{}{
	(RuntimeCompilationResult)(0),         // 0: datadog.process_agent.RuntimeCompilationResult
	(KernelHeaderFetchResult)(0),          // 1: datadog.process_agent.KernelHeaderFetchResult
	(COREResult)(0),                       // 2: datadog.process_agent.COREResult
	(ConnectionFamily)(0),                 // 3: datadog.process_agent.ConnectionFamily
	(ConnectionDirection)(0),              // 4: datadog.process_agent.ConnectionDirection
	(EphemeralPortState)(0),               // 5: datadog.process_agent.EphemeralPortState
	(ProtocolType)(0),                     // 6: datadog.process_agent.ProtocolType
	(*CollectorConnections)(nil),          // 7: datadog.process_agent.CollectorConnections
	(*Connections)(nil),                   // 8: datadog.process_agent.Connections
	(*Connection)(nil),                    // 9: datadog.process_agent.Connection
	(*ResourceMetadata)(nil),              // 10: datadog.process_agent.ResourceMetadata
	(*ConnectionsTelemetry)(nil),          // 11: datadog.process_agent.ConnectionsTelemetry
	(*CollectorConnectionsTelemetry)(nil), // 12: datadog.process_agent.CollectorConnectionsTelemetry
	(*RuntimeCompilationTelemetry)(nil),   // 13: datadog.process_agent.RuntimeCompilationTelemetry
	(*AgentConfiguration)(nil),            // 14: datadog.process_agent.AgentConfiguration
	(*Route)(nil),                         // 15: datadog.process_agent.Route
	(*Subnet)(nil),                        // 16: datadog.process_agent.Subnet
	(*RouteMetadata)(nil),                 // 17: datadog.process_agent.RouteMetadata
	(*IPTranslation)(nil),                 // 18: datadog.process_agent.IPTranslation
	(*Addr)(nil),                          // 19: datadog.process_agent.Addr
	(*ProtocolStack)(nil),                 // 20: datadog.process_agent.ProtocolStack
	(*DNSEntry)(nil),                      // 21: datadog.process_agent.DNSEntry
	(*DNSStats)(nil),                      // 22: datadog.process_agent.DNSStats
	(*DNSStatsByQueryType)(nil),           // 23: datadog.process_agent.DNSStatsByQueryType
	nil,                                   // 24: datadog.process_agent.CollectorConnections.ResolvedResourcesEntry
	nil,                                   // 25: datadog.process_agent.CollectorConnections.ContainerForPidEntry
	nil,                                   // 26: datadog.process_agent.CollectorConnections.ConnTelemetryMapEntry
	nil,                                   // 27: datadog.process_agent.CollectorConnections.CompilationTelemetryByAssetEntry
	nil,                                   // 28: datadog.process_agent.CollectorConnections.CORETelemetryByAssetEntry
	nil,                                   // 29: datadog.process_agent.CollectorConnections.ResolvedHostsByNameEntry
	nil,                                   // 30: datadog.process_agent.Connections.DnsEntry
	nil,                                   // 31: datadog.process_agent.Connections.CompilationTelemetryByAssetEntry
	nil,                                   // 32: datadog.process_agent.Connections.ConnTelemetryMapEntry
	nil,                                   // 33: datadog.process_agent.Connections.CORETelemetryByAssetEntry
	nil,                                   // 34: datadog.process_agent.Connection.DnsCountByRcodeEntry
	nil,                                   // 35: datadog.process_agent.Connection.DnsStatsByDomainEntry
	nil,                                   // 36: datadog.process_agent.Connection.DnsStatsByDomainByQueryTypeEntry
	nil,                                   // 37: datadog.process_agent.Connection.DnsStatsByDomainOffsetByQueryTypeEntry
	nil,                                   // 38: datadog.process_agent.Connection.TcpFailuresByErrCodeEntry
	nil,                                   // 39: datadog.process_agent.DNSStats.DnsCountByRcodeEntry
	nil,                                   // 40: datadog.process_agent.DNSStatsByQueryType.DnsStatsByQueryTypeEntry
	(ContainerHostType)(0),                // 41: datadog.process_agent.ContainerHostType
	(ConnectionType)(0),                   // 42: datadog.process_agent.ConnectionType
	(*Host)(nil),                          // 43: datadog.process_agent.Host
}
var file_proto_process_connections_proto_depIdxs = []int32{
	9,  // 0: datadog.process_agent.CollectorConnections.connections:type_name -> datadog.process_agent.Connection
	24, // 1: datadog.process_agent.CollectorConnections.resolvedResources:type_name -> datadog.process_agent.CollectorConnections.ResolvedResourcesEntry
	25, // 2: datadog.process_agent.CollectorConnections.containerForPid:type_name -> datadog.process_agent.CollectorConnections.ContainerForPidEntry
	41, // 3: datadog.process_agent.CollectorConnections.containerHostType:type_name -> datadog.process_agent.ContainerHostType
	12, // 4: datadog.process_agent.CollectorConnections.connTelemetry:type_name -> datadog.process_agent.CollectorConnectionsTelemetry
	26, // 5: datadog.process_agent.CollectorConnections.connTelemetryMap:type_name -> datadog.process_agent.CollectorConnections.ConnTelemetryMapEntry
	27, // 6: datadog.process_agent.CollectorConnections.compilationTelemetryByAsset:type_name -> datadog.process_agent.CollectorConnections.CompilationTelemetryByAssetEntry
	1,  // 7: datadog.process_agent.CollectorConnections.kernelHeaderFetchResult:type_name -> datadog.process_agent.KernelHeaderFetchResult
	28, // 8: datadog.process_agent.CollectorConnections.CORETelemetryByAsset:type_name -> datadog.process_agent.CollectorConnections.CORETelemetryByAssetEntry
	15, // 9: datadog.process_agent.CollectorConnections.routes:type_name -> datadog.process_agent.Route
	17, // 10: datadog.process_agent.CollectorConnections.routeMetadata:type_name -> datadog.process_agent.RouteMetadata
	14, // 11: datadog.process_agent.CollectorConnections.agentConfiguration:type_name -> datadog.process_agent.AgentConfiguration
	29, // 12: datadog.process_agent.CollectorConnections.resolvedHostsByName:type_name -> datadog.process_agent.CollectorConnections.ResolvedHostsByNameEntry
	9,  // 13: datadog.process_agent.Connections.conns:type_name -> datadog.process_agent.Connection
	30, // 14: datadog.process_agent.Connections.dns:type_name -> datadog.process_agent.Connections.DnsEntry
	11, // 15: datadog.process_agent.Connections.connTelemetry:type_name -> datadog.process_agent.ConnectionsTelemetry
	15, // 16: datadog.process_agent.Connections.routes:type_name -> datadog.process_agent.Route
	31, // 17: datadog.process_agent.Connections.compilationTelemetryByAsset:type_name -> datadog.process_agent.Connections.CompilationTelemetryByAssetEntry
	14, // 18: datadog.process_agent.Connections.agentConfiguration:type_name -> datadog.process_agent.AgentConfiguration
	32, // 19: datadog.process_agent.Connections.connTelemetryMap:type_name -> datadog.process_agent.Connections.ConnTelemetryMapEntry
	1,  // 20: datadog.process_agent.Connections.kernelHeaderFetchResult:type_name -> datadog.process_agent.KernelHeaderFetchResult
	33, // 21: datadog.process_agent.Connections.CORETelemetryByAsset:type_name -> datadog.process_agent.Connections.CORETelemetryByAssetEntry
	19, // 22: datadog.process_agent.Connection.laddr:type_name -> datadog.process_agent.Addr
	19, // 23: datadog.process_agent.Connection.raddr:type_name -> datadog.process_agent.Addr
	3,  // 24: datadog.process_agent.Connection.family:type_name -> datadog.process_agent.ConnectionFamily
	42, // 25: datadog.process_agent.Connection.type:type_name -> datadog.process_agent.ConnectionType
	5,  // 26: datadog.process_agent.Connection.isLocalPortEphemeral:type_name -> datadog.process_agent.EphemeralPortState
	4,  // 27: datadog.process_agent.Connection.direction:type_name -> datadog.process_agent.ConnectionDirection
	20, // 28: datadog.process_agent.Connection.protocol:type_name -> datadog.process_agent.ProtocolStack
	18, // 29: datadog.process_agent.Connection.ipTranslation:type_name -> datadog.process_agent.IPTranslation
	34, // 30: datadog.process_agent.Connection.dnsCountByRcode:type_name -> datadog.process_agent.Connection.DnsCountByRcodeEntry
	35, // 31: datadog.process_agent.Connection.dnsStatsByDomain:type_name -> datadog.process_agent.Connection.DnsStatsByDomainEntry
	36, // 32: datadog.process_agent.Connection.dnsStatsByDomainByQueryType:type_name -> datadog.process_agent.Connection.DnsStatsByDomainByQueryTypeEntry
	37, // 33: datadog.process_agent.Connection.dnsStatsByDomainOffsetByQueryType:type_name -> datadog.process_agent.Connection.DnsStatsByDomainOffsetByQueryTypeEntry
	38, // 34: datadog.process_agent.Connection.tcpFailuresByErrCode:type_name -> datadog.process_agent.Connection.TcpFailuresByErrCodeEntry
	0,  // 35: datadog.process_agent.RuntimeCompilationTelemetry.runtimeCompilationResult:type_name -> datadog.process_agent.RuntimeCompilationResult
	1,  // 36: datadog.process_agent.RuntimeCompilationTelemetry.kernelHeaderFetchResult:type_name -> datadog.process_agent.KernelHeaderFetchResult
	16, // 37: datadog.process_agent.Route.subnet:type_name -> datadog.process_agent.Subnet
	6,  // 38: datadog.process_agent.ProtocolStack.stack:type_name -> datadog.process_agent.ProtocolType
	39, // 39: datadog.process_agent.DNSStats.dnsCountByRcode:type_name -> datadog.process_agent.DNSStats.DnsCountByRcodeEntry
	40, // 40: datadog.process_agent.DNSStatsByQueryType.dnsStatsByQueryType:type_name -> datadog.process_agent.DNSStatsByQueryType.DnsStatsByQueryTypeEntry
	10, // 41: datadog.process_agent.CollectorConnections.ResolvedResourcesEntry.value:type_name -> datadog.process_agent.ResourceMetadata
	13, // 42: datadog.process_agent.CollectorConnections.CompilationTelemetryByAssetEntry.value:type_name -> datadog.process_agent.RuntimeCompilationTelemetry
	2,  // 43: datadog.process_agent.CollectorConnections.CORETelemetryByAssetEntry.value:type_name -> datadog.process_agent.COREResult
	43, // 44: datadog.process_agent.CollectorConnections.ResolvedHostsByNameEntry.value:type_name -> datadog.process_agent.Host
	21, // 45: datadog.process_agent.Connections.DnsEntry.value:type_name -> datadog.process_agent.DNSEntry
	13, // 46: datadog.process_agent.Connections.CompilationTelemetryByAssetEntry.value:type_name -> datadog.process_agent.RuntimeCompilationTelemetry
	2,  // 47: datadog.process_agent.Connections.CORETelemetryByAssetEntry.value:type_name -> datadog.process_agent.COREResult
	22, // 48: datadog.process_agent.Connection.DnsStatsByDomainEntry.value:type_name -> datadog.process_agent.DNSStats
	23, // 49: datadog.process_agent.Connection.DnsStatsByDomainByQueryTypeEntry.value:type_name -> datadog.process_agent.DNSStatsByQueryType
	23, // 50: datadog.process_agent.Connection.DnsStatsByDomainOffsetByQueryTypeEntry.value:type_name -> datadog.process_agent.DNSStatsByQueryType
	22, // 51: datadog.process_agent.DNSStatsByQueryType.DnsStatsByQueryTypeEntry.value:type_name -> datadog.process_agent.DNSStats
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_proto_process_connections_proto_init() }
func file_proto_process_connections_proto_init() {
	if File_proto_process_connections_proto != nil {
		return
	}
	file_proto_process_agent_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_process_connections_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorConnections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionsTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorConnectionsTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuntimeCompilationTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPTranslation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Addr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_process_connections_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DNSStatsByQueryType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_process_connections_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_process_connections_proto_goTypes,
		DependencyIndexes: file_proto_process_connections_proto_depIdxs,
		EnumInfos:         file_proto_process_connections_proto_enumTypes,
		MessageInfos:      file_proto_process_connections_proto_msgTypes,
	}.Build()
	File_proto_process_connections_proto = out.File
	file_proto_process_connections_proto_rawDesc = nil
	file_proto_process_connections_proto_goTypes = nil
	file_proto_process_connections_proto_depIdxs = nil
}
